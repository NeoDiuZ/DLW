2025-02-22 01:08:21,473:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:08:21,473:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:08:21,473:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:08:21,473:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:08:22,431:INFO:PyCaret ClassificationExperiment
2025-02-22 01:08:22,431:INFO:Logging name: clf-default-name
2025-02-22 01:08:22,431:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-22 01:08:22,431:INFO:version 3.3.2
2025-02-22 01:08:22,431:INFO:Initializing setup()
2025-02-22 01:08:22,432:INFO:self.USI: 4f82
2025-02-22 01:08:22,432:INFO:self._variable_keys: {'_ml_usecase', 'exp_id', 'idx', 'y', 'html_param', 'USI', 'X', 'gpu_n_jobs_param', 'exp_name_log', 'target_param', 'fold_shuffle_param', 'X_train', 'pipeline', 'is_multiclass', 'n_jobs_param', '_available_plots', 'data', 'log_plots_param', 'fix_imbalance', 'memory', 'X_test', 'y_test', 'fold_groups_param', 'y_train', 'logging_param', 'gpu_param', 'fold_generator', 'seed'}
2025-02-22 01:08:22,432:INFO:Checking environment
2025-02-22 01:08:22,432:INFO:python_version: 3.9.20
2025-02-22 01:08:22,432:INFO:python_build: ('main', 'Oct  3 2024 02:24:59')
2025-02-22 01:08:22,432:INFO:machine: arm64
2025-02-22 01:08:22,432:INFO:platform: macOS-15.2-arm64-arm-64bit
2025-02-22 01:08:22,432:INFO:Memory: svmem(total=8589934592, available=1230667776, percent=85.7, used=3255336960, free=67960832, active=1178025984, inactive=1070972928, wired=2077310976)
2025-02-22 01:08:22,432:INFO:Physical Core: 8
2025-02-22 01:08:22,432:INFO:Logical Core: 8
2025-02-22 01:08:22,432:INFO:Checking libraries
2025-02-22 01:08:22,432:INFO:System:
2025-02-22 01:08:22,432:INFO:    python: 3.9.20 (main, Oct  3 2024, 02:24:59)  [Clang 14.0.6 ]
2025-02-22 01:08:22,432:INFO:executable: /opt/anaconda3/envs/batey/bin/python
2025-02-22 01:08:22,432:INFO:   machine: macOS-15.2-arm64-arm-64bit
2025-02-22 01:08:22,432:INFO:PyCaret required dependencies:
2025-02-22 01:08:22,556:INFO:                 pip: 24.2
2025-02-22 01:08:22,556:INFO:          setuptools: 75.1.0
2025-02-22 01:08:22,556:INFO:             pycaret: 3.3.2
2025-02-22 01:08:22,556:INFO:             IPython: 8.18.1
2025-02-22 01:08:22,556:INFO:          ipywidgets: 8.1.5
2025-02-22 01:08:22,556:INFO:                tqdm: 4.66.6
2025-02-22 01:08:22,557:INFO:               numpy: 1.26.4
2025-02-22 01:08:22,557:INFO:              pandas: 2.1.4
2025-02-22 01:08:22,557:INFO:              jinja2: 3.1.4
2025-02-22 01:08:22,557:INFO:               scipy: 1.11.4
2025-02-22 01:08:22,557:INFO:              joblib: 1.3.2
2025-02-22 01:08:22,557:INFO:             sklearn: 1.4.2
2025-02-22 01:08:22,557:INFO:                pyod: 2.0.2
2025-02-22 01:08:22,557:INFO:            imblearn: 0.12.4
2025-02-22 01:08:22,557:INFO:   category_encoders: 2.6.4
2025-02-22 01:08:22,557:INFO:            lightgbm: 4.5.0
2025-02-22 01:08:22,557:INFO:               numba: 0.60.0
2025-02-22 01:08:22,557:INFO:            requests: 2.31.0
2025-02-22 01:08:22,557:INFO:          matplotlib: 3.7.5
2025-02-22 01:08:22,557:INFO:          scikitplot: 0.3.7
2025-02-22 01:08:22,557:INFO:         yellowbrick: 1.5
2025-02-22 01:08:22,557:INFO:              plotly: 5.24.1
2025-02-22 01:08:22,557:INFO:    plotly-resampler: Not installed
2025-02-22 01:08:22,557:INFO:             kaleido: 0.2.1
2025-02-22 01:08:22,557:INFO:           schemdraw: 0.15
2025-02-22 01:08:22,557:INFO:         statsmodels: 0.14.4
2025-02-22 01:08:22,557:INFO:              sktime: 0.26.0
2025-02-22 01:08:22,557:INFO:               tbats: 1.1.3
2025-02-22 01:08:22,557:INFO:            pmdarima: 2.0.4
2025-02-22 01:08:22,557:INFO:              psutil: 6.1.0
2025-02-22 01:08:22,557:INFO:          markupsafe: 3.0.2
2025-02-22 01:08:22,557:INFO:             pickle5: Not installed
2025-02-22 01:08:22,557:INFO:         cloudpickle: 3.1.0
2025-02-22 01:08:22,557:INFO:         deprecation: 2.1.0
2025-02-22 01:08:22,557:INFO:              xxhash: 3.5.0
2025-02-22 01:08:22,557:INFO:           wurlitzer: 3.1.1
2025-02-22 01:08:22,557:INFO:PyCaret optional dependencies:
2025-02-22 01:08:22,562:INFO:                shap: Not installed
2025-02-22 01:08:22,562:INFO:           interpret: Not installed
2025-02-22 01:08:22,562:INFO:                umap: Not installed
2025-02-22 01:08:22,562:INFO:     ydata_profiling: Not installed
2025-02-22 01:08:22,562:INFO:  explainerdashboard: Not installed
2025-02-22 01:08:22,562:INFO:             autoviz: Not installed
2025-02-22 01:08:22,562:INFO:           fairlearn: Not installed
2025-02-22 01:08:22,562:INFO:          deepchecks: Not installed
2025-02-22 01:08:22,562:INFO:             xgboost: Not installed
2025-02-22 01:08:22,562:INFO:            catboost: Not installed
2025-02-22 01:08:22,562:INFO:              kmodes: Not installed
2025-02-22 01:08:22,562:INFO:             mlxtend: Not installed
2025-02-22 01:08:22,562:INFO:       statsforecast: Not installed
2025-02-22 01:08:22,562:INFO:        tune_sklearn: Not installed
2025-02-22 01:08:22,562:INFO:                 ray: Not installed
2025-02-22 01:08:22,562:INFO:            hyperopt: Not installed
2025-02-22 01:08:22,562:INFO:              optuna: Not installed
2025-02-22 01:08:22,562:INFO:               skopt: Not installed
2025-02-22 01:08:22,562:INFO:              mlflow: Not installed
2025-02-22 01:08:22,562:INFO:              gradio: Not installed
2025-02-22 01:08:22,562:INFO:             fastapi: Not installed
2025-02-22 01:08:22,562:INFO:             uvicorn: Not installed
2025-02-22 01:08:22,562:INFO:              m2cgen: Not installed
2025-02-22 01:08:22,562:INFO:           evidently: Not installed
2025-02-22 01:08:22,562:INFO:               fugue: Not installed
2025-02-22 01:08:22,562:INFO:           streamlit: 1.41.1
2025-02-22 01:08:22,562:INFO:             prophet: Not installed
2025-02-22 01:08:22,562:INFO:None
2025-02-22 01:08:22,562:INFO:Set up data.
2025-02-22 01:08:22,572:INFO:Set up folding strategy.
2025-02-22 01:08:22,572:INFO:Set up train/test split.
2025-02-22 01:08:22,590:INFO:Set up index.
2025-02-22 01:08:22,590:INFO:Assigning column types.
2025-02-22 01:08:22,592:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-22 01:08:22,609:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-22 01:08:22,610:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-22 01:08:22,624:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,624:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,642:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-22 01:08:22,642:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-22 01:08:22,653:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,653:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,653:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-22 01:08:22,671:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-22 01:08:22,681:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,681:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,699:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-22 01:08:22,710:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,710:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,711:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-22 01:08:22,739:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,739:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,769:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,770:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,771:INFO:Preparing preprocessing pipeline...
2025-02-22 01:08:22,772:INFO:Set up label encoding.
2025-02-22 01:08:22,772:INFO:Set up simple imputation.
2025-02-22 01:08:22,786:INFO:Finished creating preprocessing pipeline.
2025-02-22 01:08:22,789:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-22 01:08:22,789:INFO:Creating final display dataframe.
2025-02-22 01:08:22,819:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping    GO: 0, STOP: 1
4           Original data shape        (11847, 6)
5        Transformed data shape        (11847, 6)
6   Transformed train set shape         (8292, 6)
7    Transformed test set shape         (3555, 6)
8              Numeric features                 5
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              4f82
2025-02-22 01:08:22,848:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,848:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,877:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,877:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:08:22,877:INFO:setup() successfully completed in 0.45s...............
2025-02-22 01:08:22,900:INFO:Initializing compare_models()
2025-02-22 01:08:22,900:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-22 01:08:22,900:INFO:Checking exceptions
2025-02-22 01:08:22,902:INFO:Preparing display monitor
2025-02-22 01:08:22,919:INFO:Initializing Logistic Regression
2025-02-22 01:08:22,920:INFO:Total runtime is 2.952416737874349e-06 minutes
2025-02-22 01:08:22,920:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:22,920:INFO:Initializing create_model()
2025-02-22 01:08:22,920:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:22,920:INFO:Checking exceptions
2025-02-22 01:08:22,920:INFO:Importing libraries
2025-02-22 01:08:22,920:INFO:Copying training dataset
2025-02-22 01:08:22,923:INFO:Defining folds
2025-02-22 01:08:22,923:INFO:Declaring metric variables
2025-02-22 01:08:22,927:INFO:Importing untrained model
2025-02-22 01:08:22,928:INFO:Logistic Regression Imported successfully
2025-02-22 01:08:22,928:INFO:Starting cross validation
2025-02-22 01:08:22,928:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:27,666:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,668:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,669:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,669:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,669:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,679:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,681:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,683:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,683:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,684:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,687:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,688:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,689:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,689:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,691:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,692:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,692:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,693:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,693:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,694:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,697:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,697:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,697:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:27,707:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,347:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,369:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,380:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,476:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,481:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,484:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,497:INFO:Calculating mean and std
2025-02-22 01:08:28,502:INFO:Creating metrics dataframe
2025-02-22 01:08:28,506:INFO:Uploading results into container
2025-02-22 01:08:28,506:INFO:Uploading model into container now
2025-02-22 01:08:28,508:INFO:_master_model_container: 1
2025-02-22 01:08:28,508:INFO:_display_container: 2
2025-02-22 01:08:28,510:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-22 01:08:28,510:INFO:create_model() successfully completed......................................
2025-02-22 01:08:28,615:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:28,615:INFO:Creating metrics dataframe
2025-02-22 01:08:28,617:INFO:Initializing K Neighbors Classifier
2025-02-22 01:08:28,617:INFO:Total runtime is 0.09496289889017742 minutes
2025-02-22 01:08:28,617:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:28,617:INFO:Initializing create_model()
2025-02-22 01:08:28,617:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:28,617:INFO:Checking exceptions
2025-02-22 01:08:28,617:INFO:Importing libraries
2025-02-22 01:08:28,618:INFO:Copying training dataset
2025-02-22 01:08:28,621:INFO:Defining folds
2025-02-22 01:08:28,621:INFO:Declaring metric variables
2025-02-22 01:08:28,621:INFO:Importing untrained model
2025-02-22 01:08:28,621:INFO:K Neighbors Classifier Imported successfully
2025-02-22 01:08:28,621:INFO:Starting cross validation
2025-02-22 01:08:28,622:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:28,743:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,750:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,755:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,758:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,760:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,762:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,764:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,765:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,769:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,767:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,771:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,772:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,777:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,778:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,782:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,790:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,791:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,794:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,796:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,799:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,799:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,802:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,805:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,810:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,826:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,829:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,832:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,835:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,838:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,841:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,848:INFO:Calculating mean and std
2025-02-22 01:08:28,849:INFO:Creating metrics dataframe
2025-02-22 01:08:28,850:INFO:Uploading results into container
2025-02-22 01:08:28,850:INFO:Uploading model into container now
2025-02-22 01:08:28,850:INFO:_master_model_container: 2
2025-02-22 01:08:28,850:INFO:_display_container: 2
2025-02-22 01:08:28,851:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-22 01:08:28,851:INFO:create_model() successfully completed......................................
2025-02-22 01:08:28,909:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:28,909:INFO:Creating metrics dataframe
2025-02-22 01:08:28,911:INFO:Initializing Naive Bayes
2025-02-22 01:08:28,911:INFO:Total runtime is 0.09985846281051637 minutes
2025-02-22 01:08:28,911:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:28,911:INFO:Initializing create_model()
2025-02-22 01:08:28,911:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:28,911:INFO:Checking exceptions
2025-02-22 01:08:28,911:INFO:Importing libraries
2025-02-22 01:08:28,911:INFO:Copying training dataset
2025-02-22 01:08:28,914:INFO:Defining folds
2025-02-22 01:08:28,914:INFO:Declaring metric variables
2025-02-22 01:08:28,914:INFO:Importing untrained model
2025-02-22 01:08:28,914:INFO:Naive Bayes Imported successfully
2025-02-22 01:08:28,914:INFO:Starting cross validation
2025-02-22 01:08:28,914:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:28,949:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,951:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,954:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,955:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,955:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,957:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,957:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,958:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,962:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,964:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,964:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,967:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,968:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,971:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,972:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,974:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,977:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,979:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,979:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,988:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:28,994:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,001:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,004:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,005:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,006:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,010:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,011:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,011:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,013:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,014:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,028:INFO:Calculating mean and std
2025-02-22 01:08:29,028:INFO:Creating metrics dataframe
2025-02-22 01:08:29,029:INFO:Uploading results into container
2025-02-22 01:08:29,030:INFO:Uploading model into container now
2025-02-22 01:08:29,030:INFO:_master_model_container: 3
2025-02-22 01:08:29,030:INFO:_display_container: 2
2025-02-22 01:08:29,030:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-22 01:08:29,030:INFO:create_model() successfully completed......................................
2025-02-22 01:08:29,083:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:29,084:INFO:Creating metrics dataframe
2025-02-22 01:08:29,085:INFO:Initializing Decision Tree Classifier
2025-02-22 01:08:29,085:INFO:Total runtime is 0.10275816917419435 minutes
2025-02-22 01:08:29,085:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:29,085:INFO:Initializing create_model()
2025-02-22 01:08:29,085:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:29,085:INFO:Checking exceptions
2025-02-22 01:08:29,085:INFO:Importing libraries
2025-02-22 01:08:29,085:INFO:Copying training dataset
2025-02-22 01:08:29,088:INFO:Defining folds
2025-02-22 01:08:29,088:INFO:Declaring metric variables
2025-02-22 01:08:29,088:INFO:Importing untrained model
2025-02-22 01:08:29,088:INFO:Decision Tree Classifier Imported successfully
2025-02-22 01:08:29,088:INFO:Starting cross validation
2025-02-22 01:08:29,088:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:29,144:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,144:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,148:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,149:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,152:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,158:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,158:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,159:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,165:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,169:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,172:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,174:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,191:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,206:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,212:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,212:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,212:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,215:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,215:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,215:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,222:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,222:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,222:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,224:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,225:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,227:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,229:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,232:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,232:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,232:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,255:INFO:Calculating mean and std
2025-02-22 01:08:29,257:INFO:Creating metrics dataframe
2025-02-22 01:08:29,260:INFO:Uploading results into container
2025-02-22 01:08:29,260:INFO:Uploading model into container now
2025-02-22 01:08:29,261:INFO:_master_model_container: 4
2025-02-22 01:08:29,261:INFO:_display_container: 2
2025-02-22 01:08:29,262:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-02-22 01:08:29,262:INFO:create_model() successfully completed......................................
2025-02-22 01:08:29,324:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:29,324:INFO:Creating metrics dataframe
2025-02-22 01:08:29,326:INFO:Initializing SVM - Linear Kernel
2025-02-22 01:08:29,326:INFO:Total runtime is 0.10677433411280315 minutes
2025-02-22 01:08:29,326:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:29,326:INFO:Initializing create_model()
2025-02-22 01:08:29,326:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:29,326:INFO:Checking exceptions
2025-02-22 01:08:29,326:INFO:Importing libraries
2025-02-22 01:08:29,326:INFO:Copying training dataset
2025-02-22 01:08:29,328:INFO:Defining folds
2025-02-22 01:08:29,328:INFO:Declaring metric variables
2025-02-22 01:08:29,329:INFO:Importing untrained model
2025-02-22 01:08:29,329:INFO:SVM - Linear Kernel Imported successfully
2025-02-22 01:08:29,329:INFO:Starting cross validation
2025-02-22 01:08:29,329:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:29,450:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,453:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,454:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:29,456:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,459:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,462:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,463:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:29,462:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,465:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,474:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,476:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,480:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:29,481:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,481:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,483:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:29,483:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,490:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,495:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,498:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,500:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,500:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:29,501:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,505:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,507:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,508:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,510:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:29,511:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,524:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,526:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,528:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:29,529:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,542:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,545:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,546:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:29,548:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,553:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,556:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,558:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:29,559:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,572:INFO:Calculating mean and std
2025-02-22 01:08:29,573:INFO:Creating metrics dataframe
2025-02-22 01:08:29,574:INFO:Uploading results into container
2025-02-22 01:08:29,574:INFO:Uploading model into container now
2025-02-22 01:08:29,574:INFO:_master_model_container: 5
2025-02-22 01:08:29,574:INFO:_display_container: 2
2025-02-22 01:08:29,575:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-22 01:08:29,575:INFO:create_model() successfully completed......................................
2025-02-22 01:08:29,617:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:29,617:INFO:Creating metrics dataframe
2025-02-22 01:08:29,618:INFO:Initializing Ridge Classifier
2025-02-22 01:08:29,618:INFO:Total runtime is 0.11165011326471966 minutes
2025-02-22 01:08:29,619:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:29,619:INFO:Initializing create_model()
2025-02-22 01:08:29,619:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:29,619:INFO:Checking exceptions
2025-02-22 01:08:29,619:INFO:Importing libraries
2025-02-22 01:08:29,619:INFO:Copying training dataset
2025-02-22 01:08:29,621:INFO:Defining folds
2025-02-22 01:08:29,621:INFO:Declaring metric variables
2025-02-22 01:08:29,621:INFO:Importing untrained model
2025-02-22 01:08:29,621:INFO:Ridge Classifier Imported successfully
2025-02-22 01:08:29,621:INFO:Starting cross validation
2025-02-22 01:08:29,621:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:29,648:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,649:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,651:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,652:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,656:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,657:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,658:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,661:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,662:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,665:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,668:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,671:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,671:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,673:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,677:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,679:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,680:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,680:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,683:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,684:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,686:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,686:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,687:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,687:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,688:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,689:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,709:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,709:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,712:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,713:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:29,722:INFO:Calculating mean and std
2025-02-22 01:08:29,723:INFO:Creating metrics dataframe
2025-02-22 01:08:29,739:INFO:Uploading results into container
2025-02-22 01:08:29,739:INFO:Uploading model into container now
2025-02-22 01:08:29,739:INFO:_master_model_container: 6
2025-02-22 01:08:29,739:INFO:_display_container: 2
2025-02-22 01:08:29,740:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-22 01:08:29,740:INFO:create_model() successfully completed......................................
2025-02-22 01:08:29,804:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:29,804:INFO:Creating metrics dataframe
2025-02-22 01:08:29,805:INFO:Initializing Random Forest Classifier
2025-02-22 01:08:29,805:INFO:Total runtime is 0.11476211547851564 minutes
2025-02-22 01:08:29,805:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:29,805:INFO:Initializing create_model()
2025-02-22 01:08:29,805:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:29,805:INFO:Checking exceptions
2025-02-22 01:08:29,805:INFO:Importing libraries
2025-02-22 01:08:29,805:INFO:Copying training dataset
2025-02-22 01:08:29,808:INFO:Defining folds
2025-02-22 01:08:29,808:INFO:Declaring metric variables
2025-02-22 01:08:29,808:INFO:Importing untrained model
2025-02-22 01:08:29,808:INFO:Random Forest Classifier Imported successfully
2025-02-22 01:08:29,808:INFO:Starting cross validation
2025-02-22 01:08:29,808:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:30,360:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,363:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,364:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,371:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,373:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,383:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,391:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,395:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,403:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,407:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,411:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,414:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,425:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,428:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,437:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,863:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,867:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,871:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,894:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,915:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,923:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,928:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,937:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,937:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,963:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,967:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:30,970:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,000:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,004:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,007:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,023:INFO:Calculating mean and std
2025-02-22 01:08:31,026:INFO:Creating metrics dataframe
2025-02-22 01:08:31,036:INFO:Uploading results into container
2025-02-22 01:08:31,036:INFO:Uploading model into container now
2025-02-22 01:08:31,037:INFO:_master_model_container: 7
2025-02-22 01:08:31,037:INFO:_display_container: 2
2025-02-22 01:08:31,039:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-22 01:08:31,039:INFO:create_model() successfully completed......................................
2025-02-22 01:08:31,135:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:31,135:INFO:Creating metrics dataframe
2025-02-22 01:08:31,137:INFO:Initializing Quadratic Discriminant Analysis
2025-02-22 01:08:31,137:INFO:Total runtime is 0.1369547486305237 minutes
2025-02-22 01:08:31,137:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:31,137:INFO:Initializing create_model()
2025-02-22 01:08:31,137:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:31,137:INFO:Checking exceptions
2025-02-22 01:08:31,137:INFO:Importing libraries
2025-02-22 01:08:31,137:INFO:Copying training dataset
2025-02-22 01:08:31,140:INFO:Defining folds
2025-02-22 01:08:31,140:INFO:Declaring metric variables
2025-02-22 01:08:31,140:INFO:Importing untrained model
2025-02-22 01:08:31,140:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-22 01:08:31,140:INFO:Starting cross validation
2025-02-22 01:08:31,141:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:31,185:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:08:31,185:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:08:31,187:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:08:31,189:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:08:31,196:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:08:31,197:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,199:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,200:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,200:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:08:31,201:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,202:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,205:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,206:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,207:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,208:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,209:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,203:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:08:31,211:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,211:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,212:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,214:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,214:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,216:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,219:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,223:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,225:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:08:31,227:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,227:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:08:31,231:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,233:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,234:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,235:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:08:31,244:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,244:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,244:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,247:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,248:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,250:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,253:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,256:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,269:INFO:Calculating mean and std
2025-02-22 01:08:31,270:INFO:Creating metrics dataframe
2025-02-22 01:08:31,271:INFO:Uploading results into container
2025-02-22 01:08:31,271:INFO:Uploading model into container now
2025-02-22 01:08:31,271:INFO:_master_model_container: 8
2025-02-22 01:08:31,271:INFO:_display_container: 2
2025-02-22 01:08:31,271:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-22 01:08:31,271:INFO:create_model() successfully completed......................................
2025-02-22 01:08:31,313:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:31,313:INFO:Creating metrics dataframe
2025-02-22 01:08:31,314:INFO:Initializing Ada Boost Classifier
2025-02-22 01:08:31,314:INFO:Total runtime is 0.13991123437881473 minutes
2025-02-22 01:08:31,314:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:31,314:INFO:Initializing create_model()
2025-02-22 01:08:31,314:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:31,314:INFO:Checking exceptions
2025-02-22 01:08:31,314:INFO:Importing libraries
2025-02-22 01:08:31,314:INFO:Copying training dataset
2025-02-22 01:08:31,316:INFO:Defining folds
2025-02-22 01:08:31,316:INFO:Declaring metric variables
2025-02-22 01:08:31,316:INFO:Importing untrained model
2025-02-22 01:08:31,317:INFO:Ada Boost Classifier Imported successfully
2025-02-22 01:08:31,317:INFO:Starting cross validation
2025-02-22 01:08:31,317:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:31,332:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:08:31,335:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:08:31,337:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:08:31,340:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:08:31,346:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:08:31,348:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:08:31,357:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:08:31,376:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:08:31,517:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,520:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,523:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,529:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,536:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,536:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,537:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,539:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,539:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,541:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,542:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,545:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:08:31,548:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,550:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,551:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,554:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,557:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:08:31,564:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,567:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,570:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,570:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,571:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,573:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,574:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,577:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,577:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,667:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,670:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,673:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,680:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,683:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,686:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:31,697:INFO:Calculating mean and std
2025-02-22 01:08:31,697:INFO:Creating metrics dataframe
2025-02-22 01:08:31,698:INFO:Uploading results into container
2025-02-22 01:08:31,698:INFO:Uploading model into container now
2025-02-22 01:08:31,698:INFO:_master_model_container: 9
2025-02-22 01:08:31,699:INFO:_display_container: 2
2025-02-22 01:08:31,699:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-02-22 01:08:31,699:INFO:create_model() successfully completed......................................
2025-02-22 01:08:31,739:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:31,739:INFO:Creating metrics dataframe
2025-02-22 01:08:31,740:INFO:Initializing Gradient Boosting Classifier
2025-02-22 01:08:31,740:INFO:Total runtime is 0.14701410134633386 minutes
2025-02-22 01:08:31,740:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:31,740:INFO:Initializing create_model()
2025-02-22 01:08:31,741:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:31,741:INFO:Checking exceptions
2025-02-22 01:08:31,741:INFO:Importing libraries
2025-02-22 01:08:31,741:INFO:Copying training dataset
2025-02-22 01:08:31,745:INFO:Defining folds
2025-02-22 01:08:31,746:INFO:Declaring metric variables
2025-02-22 01:08:31,746:INFO:Importing untrained model
2025-02-22 01:08:31,746:INFO:Gradient Boosting Classifier Imported successfully
2025-02-22 01:08:31,746:INFO:Starting cross validation
2025-02-22 01:08:31,746:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:32,363:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,365:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,365:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,368:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,369:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,370:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,370:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,371:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,373:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,373:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,375:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,376:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,377:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,379:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,380:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,382:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,383:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,386:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,398:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,401:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,407:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,448:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,451:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,455:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,784:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,785:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,788:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,788:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,791:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,791:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,809:INFO:Calculating mean and std
2025-02-22 01:08:32,811:INFO:Creating metrics dataframe
2025-02-22 01:08:32,813:INFO:Uploading results into container
2025-02-22 01:08:32,814:INFO:Uploading model into container now
2025-02-22 01:08:32,814:INFO:_master_model_container: 10
2025-02-22 01:08:32,814:INFO:_display_container: 2
2025-02-22 01:08:32,815:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-22 01:08:32,815:INFO:create_model() successfully completed......................................
2025-02-22 01:08:32,900:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:32,900:INFO:Creating metrics dataframe
2025-02-22 01:08:32,901:INFO:Initializing Linear Discriminant Analysis
2025-02-22 01:08:32,901:INFO:Total runtime is 0.1663620511690776 minutes
2025-02-22 01:08:32,901:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:32,901:INFO:Initializing create_model()
2025-02-22 01:08:32,901:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:32,901:INFO:Checking exceptions
2025-02-22 01:08:32,901:INFO:Importing libraries
2025-02-22 01:08:32,901:INFO:Copying training dataset
2025-02-22 01:08:32,904:INFO:Defining folds
2025-02-22 01:08:32,904:INFO:Declaring metric variables
2025-02-22 01:08:32,904:INFO:Importing untrained model
2025-02-22 01:08:32,904:INFO:Linear Discriminant Analysis Imported successfully
2025-02-22 01:08:32,904:INFO:Starting cross validation
2025-02-22 01:08:32,904:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:32,946:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,947:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,951:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,951:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,953:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,954:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,954:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,961:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,967:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,969:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,974:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,981:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,983:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,984:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,988:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,994:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:32,995:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,000:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,000:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,002:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,003:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,004:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,005:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,008:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,010:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,010:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,011:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,013:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,015:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,016:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,022:INFO:Calculating mean and std
2025-02-22 01:08:33,022:INFO:Creating metrics dataframe
2025-02-22 01:08:33,023:INFO:Uploading results into container
2025-02-22 01:08:33,023:INFO:Uploading model into container now
2025-02-22 01:08:33,023:INFO:_master_model_container: 11
2025-02-22 01:08:33,024:INFO:_display_container: 2
2025-02-22 01:08:33,024:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-22 01:08:33,024:INFO:create_model() successfully completed......................................
2025-02-22 01:08:33,063:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:33,063:INFO:Creating metrics dataframe
2025-02-22 01:08:33,065:INFO:Initializing Extra Trees Classifier
2025-02-22 01:08:33,065:INFO:Total runtime is 0.16908548275629684 minutes
2025-02-22 01:08:33,065:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:33,065:INFO:Initializing create_model()
2025-02-22 01:08:33,065:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:33,065:INFO:Checking exceptions
2025-02-22 01:08:33,065:INFO:Importing libraries
2025-02-22 01:08:33,065:INFO:Copying training dataset
2025-02-22 01:08:33,067:INFO:Defining folds
2025-02-22 01:08:33,067:INFO:Declaring metric variables
2025-02-22 01:08:33,067:INFO:Importing untrained model
2025-02-22 01:08:33,067:INFO:Extra Trees Classifier Imported successfully
2025-02-22 01:08:33,067:INFO:Starting cross validation
2025-02-22 01:08:33,068:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:33,406:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,409:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,412:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,412:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,415:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,415:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,416:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,417:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,418:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,419:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,420:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,421:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,422:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,423:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,426:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,448:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,452:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,455:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,481:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,481:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,484:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,487:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,487:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,491:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,564:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,564:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,567:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,567:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,570:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,570:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:33,585:INFO:Calculating mean and std
2025-02-22 01:08:33,586:INFO:Creating metrics dataframe
2025-02-22 01:08:33,587:INFO:Uploading results into container
2025-02-22 01:08:33,587:INFO:Uploading model into container now
2025-02-22 01:08:33,588:INFO:_master_model_container: 12
2025-02-22 01:08:33,588:INFO:_display_container: 2
2025-02-22 01:08:33,588:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-02-22 01:08:33,588:INFO:create_model() successfully completed......................................
2025-02-22 01:08:33,640:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:33,640:INFO:Creating metrics dataframe
2025-02-22 01:08:33,641:INFO:Initializing Light Gradient Boosting Machine
2025-02-22 01:08:33,641:INFO:Total runtime is 0.17870013316472377 minutes
2025-02-22 01:08:33,642:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:33,642:INFO:Initializing create_model()
2025-02-22 01:08:33,642:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:33,642:INFO:Checking exceptions
2025-02-22 01:08:33,642:INFO:Importing libraries
2025-02-22 01:08:33,642:INFO:Copying training dataset
2025-02-22 01:08:33,644:INFO:Defining folds
2025-02-22 01:08:33,644:INFO:Declaring metric variables
2025-02-22 01:08:33,644:INFO:Importing untrained model
2025-02-22 01:08:33,644:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-22 01:08:33,644:INFO:Starting cross validation
2025-02-22 01:08:33,645:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:35,897:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:35,902:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:35,972:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:35,975:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:35,979:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,003:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,008:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,011:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,572:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,607:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,619:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,626:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,628:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,631:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,635:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,636:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,643:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,649:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,698:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,705:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,710:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,741:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,747:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:36,751:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,241:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,244:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,247:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,250:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,252:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,254:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,261:INFO:Calculating mean and std
2025-02-22 01:08:37,268:INFO:Creating metrics dataframe
2025-02-22 01:08:37,271:INFO:Uploading results into container
2025-02-22 01:08:37,272:INFO:Uploading model into container now
2025-02-22 01:08:37,273:INFO:_master_model_container: 13
2025-02-22 01:08:37,273:INFO:_display_container: 2
2025-02-22 01:08:37,273:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-22 01:08:37,274:INFO:create_model() successfully completed......................................
2025-02-22 01:08:37,348:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:37,349:INFO:Creating metrics dataframe
2025-02-22 01:08:37,350:INFO:Initializing Dummy Classifier
2025-02-22 01:08:37,350:INFO:Total runtime is 0.24050758282343554 minutes
2025-02-22 01:08:37,350:INFO:SubProcess create_model() called ==================================
2025-02-22 01:08:37,350:INFO:Initializing create_model()
2025-02-22 01:08:37,350:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x110290730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:37,350:INFO:Checking exceptions
2025-02-22 01:08:37,350:INFO:Importing libraries
2025-02-22 01:08:37,350:INFO:Copying training dataset
2025-02-22 01:08:37,353:INFO:Defining folds
2025-02-22 01:08:37,353:INFO:Declaring metric variables
2025-02-22 01:08:37,353:INFO:Importing untrained model
2025-02-22 01:08:37,353:INFO:Dummy Classifier Imported successfully
2025-02-22 01:08:37,353:INFO:Starting cross validation
2025-02-22 01:08:37,353:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:08:37,381:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,382:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,386:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,387:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,388:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,388:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:37,389:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,390:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,390:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:37,390:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:37,391:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,392:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,405:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,408:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,410:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,410:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,412:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:37,412:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,414:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:37,415:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,415:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,415:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,417:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:37,418:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,426:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,431:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,434:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:37,440:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,442:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,447:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,447:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,450:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,449:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,453:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:37,453:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:37,455:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,455:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,456:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,458:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:08:37,460:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:08:37,468:INFO:Calculating mean and std
2025-02-22 01:08:37,469:INFO:Creating metrics dataframe
2025-02-22 01:08:37,470:INFO:Uploading results into container
2025-02-22 01:08:37,470:INFO:Uploading model into container now
2025-02-22 01:08:37,470:INFO:_master_model_container: 14
2025-02-22 01:08:37,470:INFO:_display_container: 2
2025-02-22 01:08:37,470:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-02-22 01:08:37,470:INFO:create_model() successfully completed......................................
2025-02-22 01:08:37,518:INFO:SubProcess create_model() end ==================================
2025-02-22 01:08:37,518:INFO:Creating metrics dataframe
2025-02-22 01:08:37,522:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/pycaret_experiment/supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-22 01:08:37,523:INFO:Initializing create_model()
2025-02-22 01:08:37,523:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:37,523:INFO:Checking exceptions
2025-02-22 01:08:37,523:INFO:Importing libraries
2025-02-22 01:08:37,523:INFO:Copying training dataset
2025-02-22 01:08:37,525:INFO:Defining folds
2025-02-22 01:08:37,525:INFO:Declaring metric variables
2025-02-22 01:08:37,525:INFO:Importing untrained model
2025-02-22 01:08:37,525:INFO:Declaring custom model
2025-02-22 01:08:37,526:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-22 01:08:37,526:INFO:Cross validation set to False
2025-02-22 01:08:37,526:INFO:Fitting Model
2025-02-22 01:08:37,540:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:08:37,541:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-22 01:08:37,542:INFO:create_model() successfully completed......................................
2025-02-22 01:08:37,618:INFO:_master_model_container: 14
2025-02-22 01:08:37,618:INFO:_display_container: 2
2025-02-22 01:08:37,618:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-22 01:08:37,618:INFO:compare_models() successfully completed......................................
2025-02-22 01:08:37,628:INFO:Initializing finalize_model()
2025-02-22 01:08:37,628:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-22 01:08:37,629:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-22 01:08:37,632:INFO:Initializing create_model()
2025-02-22 01:08:37,632:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:08:37,632:INFO:Checking exceptions
2025-02-22 01:08:37,633:INFO:Importing libraries
2025-02-22 01:08:37,633:INFO:Copying training dataset
2025-02-22 01:08:37,633:INFO:Defining folds
2025-02-22 01:08:37,633:INFO:Declaring metric variables
2025-02-22 01:08:37,633:INFO:Importing untrained model
2025-02-22 01:08:37,634:INFO:Declaring custom model
2025-02-22 01:08:37,634:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-22 01:08:37,635:INFO:Cross validation set to False
2025-02-22 01:08:37,635:INFO:Fitting Model
2025-02-22 01:08:37,646:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:08:37,649:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2025-02-22 01:08:37,649:INFO:create_model() successfully completed......................................
2025-02-22 01:08:37,714:INFO:_master_model_container: 14
2025-02-22 01:08:37,715:INFO:_display_container: 2
2025-02-22 01:08:37,720:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2025-02-22 01:08:37,720:INFO:finalize_model() successfully completed......................................
2025-02-22 01:08:37,787:INFO:Initializing evaluate_model()
2025-02-22 01:08:37,787:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-02-22 01:08:37,801:INFO:Initializing plot_model()
2025-02-22 01:08:37,802:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x126c3c160>, system=True)
2025-02-22 01:08:37,802:INFO:Checking exceptions
2025-02-22 01:08:37,805:INFO:Preloading libraries
2025-02-22 01:08:37,805:INFO:Copying training dataset
2025-02-22 01:08:37,805:INFO:Plot type: pipeline
2025-02-22 01:08:37,934:INFO:Visual Rendered Successfully
2025-02-22 01:08:37,981:INFO:plot_model() successfully completed......................................
2025-02-22 01:08:37,991:INFO:Initializing save_model()
2025-02-22 01:08:37,991:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=nbest, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-22 01:08:37,991:INFO:Adding model into prep_pipe
2025-02-22 01:08:37,991:WARNING:Only Model saved as it was a pipeline.
2025-02-22 01:08:37,993:INFO:nbest.pkl saved in current working directory
2025-02-22 01:08:37,994:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2025-02-22 01:08:37,994:INFO:save_model() successfully completed......................................
2025-02-22 01:08:56,783:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:08:56,785:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:08:56,785:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:08:56,785:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:08:57,392:INFO:Initializing load_model()
2025-02-22 01:08:57,392:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2025-02-22 01:09:00,497:INFO:Initializing predict_model()
2025-02-22 01:09:00,498:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce76520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:09:00,498:INFO:Checking exceptions
2025-02-22 01:09:00,498:INFO:Preloading libraries
2025-02-22 01:09:00,499:INFO:Set up data.
2025-02-22 01:09:00,502:INFO:Set up index.
2025-02-22 01:09:01,585:INFO:Initializing predict_model()
2025-02-22 01:09:01,587:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce76850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:09:01,587:INFO:Checking exceptions
2025-02-22 01:09:01,587:INFO:Preloading libraries
2025-02-22 01:09:01,588:INFO:Set up data.
2025-02-22 01:09:01,590:INFO:Set up index.
2025-02-22 01:09:02,668:INFO:Initializing predict_model()
2025-02-22 01:09:02,670:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d370>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:09:02,670:INFO:Checking exceptions
2025-02-22 01:09:02,670:INFO:Preloading libraries
2025-02-22 01:09:02,670:INFO:Set up data.
2025-02-22 01:09:02,674:INFO:Set up index.
2025-02-22 01:09:03,817:INFO:Initializing predict_model()
2025-02-22 01:09:03,817:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:09:03,817:INFO:Checking exceptions
2025-02-22 01:09:03,817:INFO:Preloading libraries
2025-02-22 01:09:03,818:INFO:Set up data.
2025-02-22 01:09:03,821:INFO:Set up index.
2025-02-22 01:09:04,912:INFO:Initializing predict_model()
2025-02-22 01:09:04,912:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:09:04,912:INFO:Checking exceptions
2025-02-22 01:09:04,912:INFO:Preloading libraries
2025-02-22 01:09:04,913:INFO:Set up data.
2025-02-22 01:09:04,916:INFO:Set up index.
2025-02-22 01:09:05,992:INFO:Initializing predict_model()
2025-02-22 01:09:05,993:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da22910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16d84b4c0>)
2025-02-22 01:09:05,993:INFO:Checking exceptions
2025-02-22 01:09:05,993:INFO:Preloading libraries
2025-02-22 01:09:05,993:INFO:Set up data.
2025-02-22 01:09:05,996:INFO:Set up index.
2025-02-22 01:09:07,071:INFO:Initializing predict_model()
2025-02-22 01:09:07,072:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da227f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:07,072:INFO:Checking exceptions
2025-02-22 01:09:07,072:INFO:Preloading libraries
2025-02-22 01:09:07,072:INFO:Set up data.
2025-02-22 01:09:07,074:INFO:Set up index.
2025-02-22 01:09:08,181:INFO:Initializing predict_model()
2025-02-22 01:09:08,181:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da229a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:08,181:INFO:Checking exceptions
2025-02-22 01:09:08,182:INFO:Preloading libraries
2025-02-22 01:09:08,184:INFO:Set up data.
2025-02-22 01:09:08,188:INFO:Set up index.
2025-02-22 01:09:09,287:INFO:Initializing predict_model()
2025-02-22 01:09:09,288:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce76850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:09,288:INFO:Checking exceptions
2025-02-22 01:09:09,288:INFO:Preloading libraries
2025-02-22 01:09:09,288:INFO:Set up data.
2025-02-22 01:09:09,291:INFO:Set up index.
2025-02-22 01:09:10,352:INFO:Initializing predict_model()
2025-02-22 01:09:10,352:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796ce80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:10,352:INFO:Checking exceptions
2025-02-22 01:09:10,352:INFO:Preloading libraries
2025-02-22 01:09:10,352:INFO:Set up data.
2025-02-22 01:09:10,353:INFO:Set up index.
2025-02-22 01:09:11,396:INFO:Initializing predict_model()
2025-02-22 01:09:11,396:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796cf10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:11,396:INFO:Checking exceptions
2025-02-22 01:09:11,396:INFO:Preloading libraries
2025-02-22 01:09:11,396:INFO:Set up data.
2025-02-22 01:09:11,397:INFO:Set up index.
2025-02-22 01:09:12,450:INFO:Initializing predict_model()
2025-02-22 01:09:12,451:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da229a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:12,451:INFO:Checking exceptions
2025-02-22 01:09:12,451:INFO:Preloading libraries
2025-02-22 01:09:12,451:INFO:Set up data.
2025-02-22 01:09:12,452:INFO:Set up index.
2025-02-22 01:09:13,504:INFO:Initializing predict_model()
2025-02-22 01:09:13,504:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da227f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:13,504:INFO:Checking exceptions
2025-02-22 01:09:13,504:INFO:Preloading libraries
2025-02-22 01:09:13,505:INFO:Set up data.
2025-02-22 01:09:13,506:INFO:Set up index.
2025-02-22 01:09:14,566:INFO:Initializing predict_model()
2025-02-22 01:09:14,566:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796cf10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:14,566:INFO:Checking exceptions
2025-02-22 01:09:14,566:INFO:Preloading libraries
2025-02-22 01:09:14,567:INFO:Set up data.
2025-02-22 01:09:14,570:INFO:Set up index.
2025-02-22 01:09:15,641:INFO:Initializing predict_model()
2025-02-22 01:09:15,641:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796ce80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:15,641:INFO:Checking exceptions
2025-02-22 01:09:15,641:INFO:Preloading libraries
2025-02-22 01:09:15,642:INFO:Set up data.
2025-02-22 01:09:15,644:INFO:Set up index.
2025-02-22 01:09:16,714:INFO:Initializing predict_model()
2025-02-22 01:09:16,714:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b0d0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da18ee0>)
2025-02-22 01:09:16,714:INFO:Checking exceptions
2025-02-22 01:09:16,714:INFO:Preloading libraries
2025-02-22 01:09:16,714:INFO:Set up data.
2025-02-22 01:09:16,716:INFO:Set up index.
2025-02-22 01:09:17,896:INFO:Initializing predict_model()
2025-02-22 01:09:17,897:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:17,897:INFO:Checking exceptions
2025-02-22 01:09:17,897:INFO:Preloading libraries
2025-02-22 01:09:17,898:INFO:Set up data.
2025-02-22 01:09:18,050:INFO:Set up index.
2025-02-22 01:09:19,197:INFO:Initializing predict_model()
2025-02-22 01:09:19,197:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:19,198:INFO:Checking exceptions
2025-02-22 01:09:19,198:INFO:Preloading libraries
2025-02-22 01:09:19,198:INFO:Set up data.
2025-02-22 01:09:19,200:INFO:Set up index.
2025-02-22 01:09:20,265:INFO:Initializing predict_model()
2025-02-22 01:09:20,266:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce76520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:20,266:INFO:Checking exceptions
2025-02-22 01:09:20,266:INFO:Preloading libraries
2025-02-22 01:09:20,266:INFO:Set up data.
2025-02-22 01:09:20,268:INFO:Set up index.
2025-02-22 01:09:21,341:INFO:Initializing predict_model()
2025-02-22 01:09:21,341:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:21,341:INFO:Checking exceptions
2025-02-22 01:09:21,341:INFO:Preloading libraries
2025-02-22 01:09:21,341:INFO:Set up data.
2025-02-22 01:09:21,344:INFO:Set up index.
2025-02-22 01:09:22,419:INFO:Initializing predict_model()
2025-02-22 01:09:22,419:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d3a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:22,419:INFO:Checking exceptions
2025-02-22 01:09:22,419:INFO:Preloading libraries
2025-02-22 01:09:22,419:INFO:Set up data.
2025-02-22 01:09:22,421:INFO:Set up index.
2025-02-22 01:09:23,490:INFO:Initializing predict_model()
2025-02-22 01:09:23,491:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da229a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:23,491:INFO:Checking exceptions
2025-02-22 01:09:23,491:INFO:Preloading libraries
2025-02-22 01:09:23,491:INFO:Set up data.
2025-02-22 01:09:23,493:INFO:Set up index.
2025-02-22 01:09:24,552:INFO:Initializing predict_model()
2025-02-22 01:09:24,553:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796c580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:24,553:INFO:Checking exceptions
2025-02-22 01:09:24,553:INFO:Preloading libraries
2025-02-22 01:09:24,554:INFO:Set up data.
2025-02-22 01:09:24,556:INFO:Set up index.
2025-02-22 01:09:25,634:INFO:Initializing predict_model()
2025-02-22 01:09:25,634:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da227f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:25,634:INFO:Checking exceptions
2025-02-22 01:09:25,634:INFO:Preloading libraries
2025-02-22 01:09:25,635:INFO:Set up data.
2025-02-22 01:09:25,636:INFO:Set up index.
2025-02-22 01:09:26,706:INFO:Initializing predict_model()
2025-02-22 01:09:26,706:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da22910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:26,707:INFO:Checking exceptions
2025-02-22 01:09:26,707:INFO:Preloading libraries
2025-02-22 01:09:26,707:INFO:Set up data.
2025-02-22 01:09:26,708:INFO:Set up index.
2025-02-22 01:09:27,759:INFO:Initializing predict_model()
2025-02-22 01:09:27,759:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d3d0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:27,759:INFO:Checking exceptions
2025-02-22 01:09:27,759:INFO:Preloading libraries
2025-02-22 01:09:27,760:INFO:Set up data.
2025-02-22 01:09:27,761:INFO:Set up index.
2025-02-22 01:09:28,817:INFO:Initializing predict_model()
2025-02-22 01:09:28,817:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d460>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:28,817:INFO:Checking exceptions
2025-02-22 01:09:28,817:INFO:Preloading libraries
2025-02-22 01:09:28,817:INFO:Set up data.
2025-02-22 01:09:28,819:INFO:Set up index.
2025-02-22 01:09:29,884:INFO:Initializing predict_model()
2025-02-22 01:09:29,884:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328b80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:29,884:INFO:Checking exceptions
2025-02-22 01:09:29,884:INFO:Preloading libraries
2025-02-22 01:09:29,885:INFO:Set up data.
2025-02-22 01:09:29,886:INFO:Set up index.
2025-02-22 01:09:30,964:INFO:Initializing predict_model()
2025-02-22 01:09:30,965:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce76850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:30,965:INFO:Checking exceptions
2025-02-22 01:09:30,965:INFO:Preloading libraries
2025-02-22 01:09:30,965:INFO:Set up data.
2025-02-22 01:09:30,967:INFO:Set up index.
2025-02-22 01:09:32,031:INFO:Initializing predict_model()
2025-02-22 01:09:32,031:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da229a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:32,031:INFO:Checking exceptions
2025-02-22 01:09:32,031:INFO:Preloading libraries
2025-02-22 01:09:32,032:INFO:Set up data.
2025-02-22 01:09:32,033:INFO:Set up index.
2025-02-22 01:09:33,090:INFO:Initializing predict_model()
2025-02-22 01:09:33,090:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da227f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:33,090:INFO:Checking exceptions
2025-02-22 01:09:33,090:INFO:Preloading libraries
2025-02-22 01:09:33,091:INFO:Set up data.
2025-02-22 01:09:33,094:INFO:Set up index.
2025-02-22 01:09:34,171:INFO:Initializing predict_model()
2025-02-22 01:09:34,171:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da22910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:34,171:INFO:Checking exceptions
2025-02-22 01:09:34,171:INFO:Preloading libraries
2025-02-22 01:09:34,172:INFO:Set up data.
2025-02-22 01:09:34,173:INFO:Set up index.
2025-02-22 01:09:35,259:INFO:Initializing predict_model()
2025-02-22 01:09:35,259:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328b80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:35,259:INFO:Checking exceptions
2025-02-22 01:09:35,259:INFO:Preloading libraries
2025-02-22 01:09:35,260:INFO:Set up data.
2025-02-22 01:09:35,263:INFO:Set up index.
2025-02-22 01:09:36,334:INFO:Initializing predict_model()
2025-02-22 01:09:36,335:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:36,335:INFO:Checking exceptions
2025-02-22 01:09:36,335:INFO:Preloading libraries
2025-02-22 01:09:36,335:INFO:Set up data.
2025-02-22 01:09:36,339:INFO:Set up index.
2025-02-22 01:09:37,421:INFO:Initializing predict_model()
2025-02-22 01:09:37,421:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:37,421:INFO:Checking exceptions
2025-02-22 01:09:37,421:INFO:Preloading libraries
2025-02-22 01:09:37,421:INFO:Set up data.
2025-02-22 01:09:37,422:INFO:Set up index.
2025-02-22 01:09:38,518:INFO:Initializing predict_model()
2025-02-22 01:09:38,518:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328b80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:38,518:INFO:Checking exceptions
2025-02-22 01:09:38,518:INFO:Preloading libraries
2025-02-22 01:09:38,519:INFO:Set up data.
2025-02-22 01:09:38,522:INFO:Set up index.
2025-02-22 01:09:39,682:INFO:Initializing predict_model()
2025-02-22 01:09:39,682:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328ee0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:39,683:INFO:Checking exceptions
2025-02-22 01:09:39,684:INFO:Preloading libraries
2025-02-22 01:09:39,685:INFO:Set up data.
2025-02-22 01:09:39,691:INFO:Set up index.
2025-02-22 01:09:40,786:INFO:Initializing predict_model()
2025-02-22 01:09:40,786:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b460>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:40,787:INFO:Checking exceptions
2025-02-22 01:09:40,787:INFO:Preloading libraries
2025-02-22 01:09:40,788:INFO:Set up data.
2025-02-22 01:09:40,790:INFO:Set up index.
2025-02-22 01:09:41,870:INFO:Initializing predict_model()
2025-02-22 01:09:41,870:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:41,870:INFO:Checking exceptions
2025-02-22 01:09:41,870:INFO:Preloading libraries
2025-02-22 01:09:41,871:INFO:Set up data.
2025-02-22 01:09:41,872:INFO:Set up index.
2025-02-22 01:09:42,934:INFO:Initializing predict_model()
2025-02-22 01:09:42,934:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:42,934:INFO:Checking exceptions
2025-02-22 01:09:42,934:INFO:Preloading libraries
2025-02-22 01:09:42,934:INFO:Set up data.
2025-02-22 01:09:42,935:INFO:Set up index.
2025-02-22 01:09:43,993:INFO:Initializing predict_model()
2025-02-22 01:09:43,994:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da22910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:43,994:INFO:Checking exceptions
2025-02-22 01:09:43,994:INFO:Preloading libraries
2025-02-22 01:09:43,994:INFO:Set up data.
2025-02-22 01:09:43,998:INFO:Set up index.
2025-02-22 01:09:45,070:INFO:Initializing predict_model()
2025-02-22 01:09:45,071:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796cf10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:45,071:INFO:Checking exceptions
2025-02-22 01:09:45,071:INFO:Preloading libraries
2025-02-22 01:09:45,071:INFO:Set up data.
2025-02-22 01:09:45,073:INFO:Set up index.
2025-02-22 01:09:46,142:INFO:Initializing predict_model()
2025-02-22 01:09:46,143:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b3d0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:46,143:INFO:Checking exceptions
2025-02-22 01:09:46,143:INFO:Preloading libraries
2025-02-22 01:09:46,143:INFO:Set up data.
2025-02-22 01:09:46,145:INFO:Set up index.
2025-02-22 01:09:47,210:INFO:Initializing predict_model()
2025-02-22 01:09:47,211:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328eb0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:47,211:INFO:Checking exceptions
2025-02-22 01:09:47,211:INFO:Preloading libraries
2025-02-22 01:09:47,211:INFO:Set up data.
2025-02-22 01:09:47,212:INFO:Set up index.
2025-02-22 01:09:48,256:INFO:Initializing predict_model()
2025-02-22 01:09:48,256:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328b80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:48,256:INFO:Checking exceptions
2025-02-22 01:09:48,256:INFO:Preloading libraries
2025-02-22 01:09:48,256:INFO:Set up data.
2025-02-22 01:09:48,258:INFO:Set up index.
2025-02-22 01:09:49,333:INFO:Initializing predict_model()
2025-02-22 01:09:49,333:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da227f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:49,333:INFO:Checking exceptions
2025-02-22 01:09:49,333:INFO:Preloading libraries
2025-02-22 01:09:49,333:INFO:Set up data.
2025-02-22 01:09:49,335:INFO:Set up index.
2025-02-22 01:09:50,394:INFO:Initializing predict_model()
2025-02-22 01:09:50,394:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d3d0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:50,394:INFO:Checking exceptions
2025-02-22 01:09:50,394:INFO:Preloading libraries
2025-02-22 01:09:50,395:INFO:Set up data.
2025-02-22 01:09:50,397:INFO:Set up index.
2025-02-22 01:09:51,458:INFO:Initializing predict_model()
2025-02-22 01:09:51,458:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da22910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:51,459:INFO:Checking exceptions
2025-02-22 01:09:51,459:INFO:Preloading libraries
2025-02-22 01:09:51,459:INFO:Set up data.
2025-02-22 01:09:51,460:INFO:Set up index.
2025-02-22 01:09:52,512:INFO:Initializing predict_model()
2025-02-22 01:09:52,512:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x1683286d0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:52,512:INFO:Checking exceptions
2025-02-22 01:09:52,512:INFO:Preloading libraries
2025-02-22 01:09:52,512:INFO:Set up data.
2025-02-22 01:09:52,513:INFO:Set up index.
2025-02-22 01:09:53,566:INFO:Initializing predict_model()
2025-02-22 01:09:53,567:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da227f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:53,567:INFO:Checking exceptions
2025-02-22 01:09:53,567:INFO:Preloading libraries
2025-02-22 01:09:53,567:INFO:Set up data.
2025-02-22 01:09:53,568:INFO:Set up index.
2025-02-22 01:09:54,623:INFO:Initializing predict_model()
2025-02-22 01:09:54,623:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328ee0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:54,623:INFO:Checking exceptions
2025-02-22 01:09:54,623:INFO:Preloading libraries
2025-02-22 01:09:54,624:INFO:Set up data.
2025-02-22 01:09:54,625:INFO:Set up index.
2025-02-22 01:09:55,693:INFO:Initializing predict_model()
2025-02-22 01:09:55,694:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce76850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:55,694:INFO:Checking exceptions
2025-02-22 01:09:55,694:INFO:Preloading libraries
2025-02-22 01:09:55,694:INFO:Set up data.
2025-02-22 01:09:55,697:INFO:Set up index.
2025-02-22 01:09:56,767:INFO:Initializing predict_model()
2025-02-22 01:09:56,767:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328b50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:56,767:INFO:Checking exceptions
2025-02-22 01:09:56,767:INFO:Preloading libraries
2025-02-22 01:09:56,767:INFO:Set up data.
2025-02-22 01:09:56,770:INFO:Set up index.
2025-02-22 01:09:57,834:INFO:Initializing predict_model()
2025-02-22 01:09:57,834:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce76520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:57,834:INFO:Checking exceptions
2025-02-22 01:09:57,835:INFO:Preloading libraries
2025-02-22 01:09:57,835:INFO:Set up data.
2025-02-22 01:09:57,836:INFO:Set up index.
2025-02-22 01:09:58,893:INFO:Initializing predict_model()
2025-02-22 01:09:58,893:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da229a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:58,893:INFO:Checking exceptions
2025-02-22 01:09:58,893:INFO:Preloading libraries
2025-02-22 01:09:58,894:INFO:Set up data.
2025-02-22 01:09:58,895:INFO:Set up index.
2025-02-22 01:09:59,970:INFO:Initializing predict_model()
2025-02-22 01:09:59,970:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328ee0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:09:59,970:INFO:Checking exceptions
2025-02-22 01:09:59,970:INFO:Preloading libraries
2025-02-22 01:09:59,970:INFO:Set up data.
2025-02-22 01:09:59,972:INFO:Set up index.
2025-02-22 01:10:01,042:INFO:Initializing predict_model()
2025-02-22 01:10:01,042:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796c580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:01,042:INFO:Checking exceptions
2025-02-22 01:10:01,042:INFO:Preloading libraries
2025-02-22 01:10:01,043:INFO:Set up data.
2025-02-22 01:10:01,045:INFO:Set up index.
2025-02-22 01:10:02,107:INFO:Initializing predict_model()
2025-02-22 01:10:02,107:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da22910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:02,107:INFO:Checking exceptions
2025-02-22 01:10:02,107:INFO:Preloading libraries
2025-02-22 01:10:02,107:INFO:Set up data.
2025-02-22 01:10:02,109:INFO:Set up index.
2025-02-22 01:10:03,185:INFO:Initializing predict_model()
2025-02-22 01:10:03,186:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da227f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:03,186:INFO:Checking exceptions
2025-02-22 01:10:03,186:INFO:Preloading libraries
2025-02-22 01:10:03,187:INFO:Set up data.
2025-02-22 01:10:03,189:INFO:Set up index.
2025-02-22 01:10:04,260:INFO:Initializing predict_model()
2025-02-22 01:10:04,261:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b0a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:04,261:INFO:Checking exceptions
2025-02-22 01:10:04,261:INFO:Preloading libraries
2025-02-22 01:10:04,261:INFO:Set up data.
2025-02-22 01:10:04,264:INFO:Set up index.
2025-02-22 01:10:05,350:INFO:Initializing predict_model()
2025-02-22 01:10:05,350:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce761c0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:05,350:INFO:Checking exceptions
2025-02-22 01:10:05,350:INFO:Preloading libraries
2025-02-22 01:10:05,350:INFO:Set up data.
2025-02-22 01:10:05,353:INFO:Set up index.
2025-02-22 01:10:06,417:INFO:Initializing predict_model()
2025-02-22 01:10:06,417:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x1683286d0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:06,417:INFO:Checking exceptions
2025-02-22 01:10:06,417:INFO:Preloading libraries
2025-02-22 01:10:06,417:INFO:Set up data.
2025-02-22 01:10:06,420:INFO:Set up index.
2025-02-22 01:10:07,503:INFO:Initializing predict_model()
2025-02-22 01:10:07,503:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:07,503:INFO:Checking exceptions
2025-02-22 01:10:07,503:INFO:Preloading libraries
2025-02-22 01:10:07,504:INFO:Set up data.
2025-02-22 01:10:07,506:INFO:Set up index.
2025-02-22 01:10:08,570:INFO:Initializing predict_model()
2025-02-22 01:10:08,570:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328b50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:08,571:INFO:Checking exceptions
2025-02-22 01:10:08,571:INFO:Preloading libraries
2025-02-22 01:10:08,571:INFO:Set up data.
2025-02-22 01:10:08,575:INFO:Set up index.
2025-02-22 01:10:09,647:INFO:Initializing predict_model()
2025-02-22 01:10:09,647:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796c580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:09,647:INFO:Checking exceptions
2025-02-22 01:10:09,647:INFO:Preloading libraries
2025-02-22 01:10:09,647:INFO:Set up data.
2025-02-22 01:10:09,650:INFO:Set up index.
2025-02-22 01:10:10,723:INFO:Initializing predict_model()
2025-02-22 01:10:10,723:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b3d0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:10,724:INFO:Checking exceptions
2025-02-22 01:10:10,724:INFO:Preloading libraries
2025-02-22 01:10:10,724:INFO:Set up data.
2025-02-22 01:10:10,726:INFO:Set up index.
2025-02-22 01:10:11,792:INFO:Initializing predict_model()
2025-02-22 01:10:11,792:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce761c0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:11,792:INFO:Checking exceptions
2025-02-22 01:10:11,792:INFO:Preloading libraries
2025-02-22 01:10:11,792:INFO:Set up data.
2025-02-22 01:10:11,793:INFO:Set up index.
2025-02-22 01:10:12,862:INFO:Initializing predict_model()
2025-02-22 01:10:12,863:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328ee0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:12,863:INFO:Checking exceptions
2025-02-22 01:10:12,863:INFO:Preloading libraries
2025-02-22 01:10:12,863:INFO:Set up data.
2025-02-22 01:10:12,866:INFO:Set up index.
2025-02-22 01:10:13,968:INFO:Initializing predict_model()
2025-02-22 01:10:13,970:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da22910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:13,970:INFO:Checking exceptions
2025-02-22 01:10:13,970:INFO:Preloading libraries
2025-02-22 01:10:13,976:INFO:Set up data.
2025-02-22 01:10:13,979:INFO:Set up index.
2025-02-22 01:10:15,055:INFO:Initializing predict_model()
2025-02-22 01:10:15,055:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d370>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:15,055:INFO:Checking exceptions
2025-02-22 01:10:15,055:INFO:Preloading libraries
2025-02-22 01:10:15,055:INFO:Set up data.
2025-02-22 01:10:15,056:INFO:Set up index.
2025-02-22 01:10:16,121:INFO:Initializing predict_model()
2025-02-22 01:10:16,121:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796ce80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:16,122:INFO:Checking exceptions
2025-02-22 01:10:16,122:INFO:Preloading libraries
2025-02-22 01:10:16,122:INFO:Set up data.
2025-02-22 01:10:16,125:INFO:Set up index.
2025-02-22 01:10:17,193:INFO:Initializing predict_model()
2025-02-22 01:10:17,193:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796c580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:17,193:INFO:Checking exceptions
2025-02-22 01:10:17,193:INFO:Preloading libraries
2025-02-22 01:10:17,193:INFO:Set up data.
2025-02-22 01:10:17,194:INFO:Set up index.
2025-02-22 01:10:18,263:INFO:Initializing predict_model()
2025-02-22 01:10:18,263:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da229a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:18,263:INFO:Checking exceptions
2025-02-22 01:10:18,263:INFO:Preloading libraries
2025-02-22 01:10:18,263:INFO:Set up data.
2025-02-22 01:10:18,265:INFO:Set up index.
2025-02-22 01:10:19,324:INFO:Initializing predict_model()
2025-02-22 01:10:19,325:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce76520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:19,325:INFO:Checking exceptions
2025-02-22 01:10:19,325:INFO:Preloading libraries
2025-02-22 01:10:19,325:INFO:Set up data.
2025-02-22 01:10:19,327:INFO:Set up index.
2025-02-22 01:10:20,403:INFO:Initializing predict_model()
2025-02-22 01:10:20,403:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da227f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:20,403:INFO:Checking exceptions
2025-02-22 01:10:20,403:INFO:Preloading libraries
2025-02-22 01:10:20,404:INFO:Set up data.
2025-02-22 01:10:20,406:INFO:Set up index.
2025-02-22 01:10:21,492:INFO:Initializing predict_model()
2025-02-22 01:10:21,492:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b100>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:21,492:INFO:Checking exceptions
2025-02-22 01:10:21,492:INFO:Preloading libraries
2025-02-22 01:10:21,492:INFO:Set up data.
2025-02-22 01:10:21,493:INFO:Set up index.
2025-02-22 01:10:22,568:INFO:Initializing predict_model()
2025-02-22 01:10:22,568:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b070>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:22,569:INFO:Checking exceptions
2025-02-22 01:10:22,569:INFO:Preloading libraries
2025-02-22 01:10:22,569:INFO:Set up data.
2025-02-22 01:10:22,571:INFO:Set up index.
2025-02-22 01:10:23,641:INFO:Initializing predict_model()
2025-02-22 01:10:23,642:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce76520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:23,642:INFO:Checking exceptions
2025-02-22 01:10:23,642:INFO:Preloading libraries
2025-02-22 01:10:23,642:INFO:Set up data.
2025-02-22 01:10:23,644:INFO:Set up index.
2025-02-22 01:10:24,725:INFO:Initializing predict_model()
2025-02-22 01:10:24,725:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da22910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:24,725:INFO:Checking exceptions
2025-02-22 01:10:24,725:INFO:Preloading libraries
2025-02-22 01:10:24,726:INFO:Set up data.
2025-02-22 01:10:24,729:INFO:Set up index.
2025-02-22 01:10:25,811:INFO:Initializing predict_model()
2025-02-22 01:10:25,812:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328b80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:25,812:INFO:Checking exceptions
2025-02-22 01:10:25,812:INFO:Preloading libraries
2025-02-22 01:10:25,812:INFO:Set up data.
2025-02-22 01:10:25,814:INFO:Set up index.
2025-02-22 01:10:26,881:INFO:Initializing predict_model()
2025-02-22 01:10:26,881:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce76820>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:26,881:INFO:Checking exceptions
2025-02-22 01:10:26,881:INFO:Preloading libraries
2025-02-22 01:10:26,881:INFO:Set up data.
2025-02-22 01:10:26,883:INFO:Set up index.
2025-02-22 01:10:27,977:INFO:Initializing predict_model()
2025-02-22 01:10:27,977:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328b50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:27,977:INFO:Checking exceptions
2025-02-22 01:10:27,977:INFO:Preloading libraries
2025-02-22 01:10:27,978:INFO:Set up data.
2025-02-22 01:10:27,983:INFO:Set up index.
2025-02-22 01:10:29,397:INFO:Initializing predict_model()
2025-02-22 01:10:29,397:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328b80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:29,397:INFO:Checking exceptions
2025-02-22 01:10:29,397:INFO:Preloading libraries
2025-02-22 01:10:29,397:INFO:Set up data.
2025-02-22 01:10:29,399:INFO:Set up index.
2025-02-22 01:10:30,495:INFO:Initializing predict_model()
2025-02-22 01:10:30,496:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce765e0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:30,496:INFO:Checking exceptions
2025-02-22 01:10:30,496:INFO:Preloading libraries
2025-02-22 01:10:30,496:INFO:Set up data.
2025-02-22 01:10:30,498:INFO:Set up index.
2025-02-22 01:10:31,562:INFO:Initializing predict_model()
2025-02-22 01:10:31,562:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b040>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:31,562:INFO:Checking exceptions
2025-02-22 01:10:31,562:INFO:Preloading libraries
2025-02-22 01:10:31,562:INFO:Set up data.
2025-02-22 01:10:31,564:INFO:Set up index.
2025-02-22 01:10:32,800:INFO:Initializing predict_model()
2025-02-22 01:10:32,807:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:32,807:INFO:Checking exceptions
2025-02-22 01:10:32,808:INFO:Preloading libraries
2025-02-22 01:10:32,809:INFO:Set up data.
2025-02-22 01:10:32,817:INFO:Set up index.
2025-02-22 01:10:33,955:INFO:Initializing predict_model()
2025-02-22 01:10:33,955:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d370>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:33,955:INFO:Checking exceptions
2025-02-22 01:10:33,955:INFO:Preloading libraries
2025-02-22 01:10:33,955:INFO:Set up data.
2025-02-22 01:10:33,956:INFO:Set up index.
2025-02-22 01:10:35,033:INFO:Initializing predict_model()
2025-02-22 01:10:35,034:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da229a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:35,034:INFO:Checking exceptions
2025-02-22 01:10:35,034:INFO:Preloading libraries
2025-02-22 01:10:35,035:INFO:Set up data.
2025-02-22 01:10:35,038:INFO:Set up index.
2025-02-22 01:10:36,120:INFO:Initializing predict_model()
2025-02-22 01:10:36,120:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce767f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:36,120:INFO:Checking exceptions
2025-02-22 01:10:36,120:INFO:Preloading libraries
2025-02-22 01:10:36,120:INFO:Set up data.
2025-02-22 01:10:36,121:INFO:Set up index.
2025-02-22 01:10:37,179:INFO:Initializing predict_model()
2025-02-22 01:10:37,179:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796c580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:37,190:INFO:Checking exceptions
2025-02-22 01:10:37,190:INFO:Preloading libraries
2025-02-22 01:10:37,190:INFO:Set up data.
2025-02-22 01:10:37,191:INFO:Set up index.
2025-02-22 01:10:38,331:INFO:Initializing predict_model()
2025-02-22 01:10:38,331:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796cf10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:38,331:INFO:Checking exceptions
2025-02-22 01:10:38,331:INFO:Preloading libraries
2025-02-22 01:10:38,332:INFO:Set up data.
2025-02-22 01:10:38,334:INFO:Set up index.
2025-02-22 01:10:39,439:INFO:Initializing predict_model()
2025-02-22 01:10:39,440:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b070>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:39,440:INFO:Checking exceptions
2025-02-22 01:10:39,440:INFO:Preloading libraries
2025-02-22 01:10:39,441:INFO:Set up data.
2025-02-22 01:10:39,447:INFO:Set up index.
2025-02-22 01:10:40,531:INFO:Initializing predict_model()
2025-02-22 01:10:40,532:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796ce80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:40,532:INFO:Checking exceptions
2025-02-22 01:10:40,532:INFO:Preloading libraries
2025-02-22 01:10:40,532:INFO:Set up data.
2025-02-22 01:10:40,534:INFO:Set up index.
2025-02-22 01:10:41,593:INFO:Initializing predict_model()
2025-02-22 01:10:41,593:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:41,593:INFO:Checking exceptions
2025-02-22 01:10:41,593:INFO:Preloading libraries
2025-02-22 01:10:41,593:INFO:Set up data.
2025-02-22 01:10:41,594:INFO:Set up index.
2025-02-22 01:10:42,654:INFO:Initializing predict_model()
2025-02-22 01:10:42,654:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da227f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:42,654:INFO:Checking exceptions
2025-02-22 01:10:42,654:INFO:Preloading libraries
2025-02-22 01:10:42,655:INFO:Set up data.
2025-02-22 01:10:42,656:INFO:Set up index.
2025-02-22 01:10:43,711:INFO:Initializing predict_model()
2025-02-22 01:10:43,712:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce76820>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16da30790>)
2025-02-22 01:10:43,712:INFO:Checking exceptions
2025-02-22 01:10:43,712:INFO:Preloading libraries
2025-02-22 01:10:43,712:INFO:Set up data.
2025-02-22 01:10:43,714:INFO:Set up index.
2025-02-22 01:10:44,804:INFO:Initializing predict_model()
2025-02-22 01:10:44,804:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce767f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x16d84b550>)
2025-02-22 01:10:44,804:INFO:Checking exceptions
2025-02-22 01:10:44,804:INFO:Preloading libraries
2025-02-22 01:10:44,805:INFO:Set up data.
2025-02-22 01:10:44,808:INFO:Set up index.
2025-02-22 01:10:45,913:INFO:Initializing predict_model()
2025-02-22 01:10:45,913:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:45,913:INFO:Checking exceptions
2025-02-22 01:10:45,913:INFO:Preloading libraries
2025-02-22 01:10:45,913:INFO:Set up data.
2025-02-22 01:10:45,914:INFO:Set up index.
2025-02-22 01:10:46,975:INFO:Initializing predict_model()
2025-02-22 01:10:46,975:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x1683286d0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:46,975:INFO:Checking exceptions
2025-02-22 01:10:46,975:INFO:Preloading libraries
2025-02-22 01:10:46,975:INFO:Set up data.
2025-02-22 01:10:46,977:INFO:Set up index.
2025-02-22 01:10:48,058:INFO:Initializing predict_model()
2025-02-22 01:10:48,058:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b2e0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:48,058:INFO:Checking exceptions
2025-02-22 01:10:48,058:INFO:Preloading libraries
2025-02-22 01:10:48,059:INFO:Set up data.
2025-02-22 01:10:48,061:INFO:Set up index.
2025-02-22 01:10:49,125:INFO:Initializing predict_model()
2025-02-22 01:10:49,125:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:49,125:INFO:Checking exceptions
2025-02-22 01:10:49,125:INFO:Preloading libraries
2025-02-22 01:10:49,126:INFO:Set up data.
2025-02-22 01:10:49,127:INFO:Set up index.
2025-02-22 01:10:50,190:INFO:Initializing predict_model()
2025-02-22 01:10:50,190:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce767f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:50,190:INFO:Checking exceptions
2025-02-22 01:10:50,190:INFO:Preloading libraries
2025-02-22 01:10:50,191:INFO:Set up data.
2025-02-22 01:10:50,192:INFO:Set up index.
2025-02-22 01:10:51,251:INFO:Initializing predict_model()
2025-02-22 01:10:51,252:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b2e0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:51,252:INFO:Checking exceptions
2025-02-22 01:10:51,252:INFO:Preloading libraries
2025-02-22 01:10:51,253:INFO:Set up data.
2025-02-22 01:10:51,255:INFO:Set up index.
2025-02-22 01:10:52,334:INFO:Initializing predict_model()
2025-02-22 01:10:52,334:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796c580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:52,334:INFO:Checking exceptions
2025-02-22 01:10:52,334:INFO:Preloading libraries
2025-02-22 01:10:52,335:INFO:Set up data.
2025-02-22 01:10:52,338:INFO:Set up index.
2025-02-22 01:10:53,415:INFO:Initializing predict_model()
2025-02-22 01:10:53,415:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328ee0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:53,415:INFO:Checking exceptions
2025-02-22 01:10:53,415:INFO:Preloading libraries
2025-02-22 01:10:53,416:INFO:Set up data.
2025-02-22 01:10:53,417:INFO:Set up index.
2025-02-22 01:10:54,470:INFO:Initializing predict_model()
2025-02-22 01:10:54,470:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328b80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:54,470:INFO:Checking exceptions
2025-02-22 01:10:54,470:INFO:Preloading libraries
2025-02-22 01:10:54,471:INFO:Set up data.
2025-02-22 01:10:54,472:INFO:Set up index.
2025-02-22 01:10:55,542:INFO:Initializing predict_model()
2025-02-22 01:10:55,542:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d3a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:55,542:INFO:Checking exceptions
2025-02-22 01:10:55,543:INFO:Preloading libraries
2025-02-22 01:10:55,543:INFO:Set up data.
2025-02-22 01:10:55,545:INFO:Set up index.
2025-02-22 01:10:56,613:INFO:Initializing predict_model()
2025-02-22 01:10:56,614:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce76820>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:56,614:INFO:Checking exceptions
2025-02-22 01:10:56,614:INFO:Preloading libraries
2025-02-22 01:10:56,614:INFO:Set up data.
2025-02-22 01:10:56,617:INFO:Set up index.
2025-02-22 01:10:57,723:INFO:Initializing predict_model()
2025-02-22 01:10:57,723:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce761c0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:57,723:INFO:Checking exceptions
2025-02-22 01:10:57,723:INFO:Preloading libraries
2025-02-22 01:10:57,724:INFO:Set up data.
2025-02-22 01:10:57,727:INFO:Set up index.
2025-02-22 01:10:58,832:INFO:Initializing predict_model()
2025-02-22 01:10:58,832:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796cf10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:58,832:INFO:Checking exceptions
2025-02-22 01:10:58,832:INFO:Preloading libraries
2025-02-22 01:10:58,832:INFO:Set up data.
2025-02-22 01:10:58,833:INFO:Set up index.
2025-02-22 01:10:59,891:INFO:Initializing predict_model()
2025-02-22 01:10:59,891:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da22910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:10:59,891:INFO:Checking exceptions
2025-02-22 01:10:59,891:INFO:Preloading libraries
2025-02-22 01:10:59,891:INFO:Set up data.
2025-02-22 01:10:59,893:INFO:Set up index.
2025-02-22 01:11:00,949:INFO:Initializing predict_model()
2025-02-22 01:11:00,949:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da227f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:00,949:INFO:Checking exceptions
2025-02-22 01:11:00,949:INFO:Preloading libraries
2025-02-22 01:11:00,949:INFO:Set up data.
2025-02-22 01:11:00,950:INFO:Set up index.
2025-02-22 01:11:02,013:INFO:Initializing predict_model()
2025-02-22 01:11:02,013:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da229a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:02,013:INFO:Checking exceptions
2025-02-22 01:11:02,013:INFO:Preloading libraries
2025-02-22 01:11:02,013:INFO:Set up data.
2025-02-22 01:11:02,014:INFO:Set up index.
2025-02-22 01:11:03,089:INFO:Initializing predict_model()
2025-02-22 01:11:03,089:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796cf10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:03,089:INFO:Checking exceptions
2025-02-22 01:11:03,089:INFO:Preloading libraries
2025-02-22 01:11:03,090:INFO:Set up data.
2025-02-22 01:11:03,095:INFO:Set up index.
2025-02-22 01:11:04,203:INFO:Initializing predict_model()
2025-02-22 01:11:04,203:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796c580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:04,203:INFO:Checking exceptions
2025-02-22 01:11:04,203:INFO:Preloading libraries
2025-02-22 01:11:04,204:INFO:Set up data.
2025-02-22 01:11:04,206:INFO:Set up index.
2025-02-22 01:11:05,286:INFO:Initializing predict_model()
2025-02-22 01:11:05,286:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce8b160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:05,286:INFO:Checking exceptions
2025-02-22 01:11:05,286:INFO:Preloading libraries
2025-02-22 01:11:05,286:INFO:Set up data.
2025-02-22 01:11:05,288:INFO:Set up index.
2025-02-22 01:11:06,348:INFO:Initializing predict_model()
2025-02-22 01:11:06,348:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x168328eb0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:06,348:INFO:Checking exceptions
2025-02-22 01:11:06,348:INFO:Preloading libraries
2025-02-22 01:11:06,349:INFO:Set up data.
2025-02-22 01:11:06,350:INFO:Set up index.
2025-02-22 01:11:07,429:INFO:Initializing predict_model()
2025-02-22 01:11:07,429:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da227f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:07,430:INFO:Checking exceptions
2025-02-22 01:11:07,430:INFO:Preloading libraries
2025-02-22 01:11:07,430:INFO:Set up data.
2025-02-22 01:11:07,431:INFO:Set up index.
2025-02-22 01:11:08,513:INFO:Initializing predict_model()
2025-02-22 01:11:08,514:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da22910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:08,514:INFO:Checking exceptions
2025-02-22 01:11:08,514:INFO:Preloading libraries
2025-02-22 01:11:08,514:INFO:Set up data.
2025-02-22 01:11:08,515:INFO:Set up index.
2025-02-22 01:11:09,632:INFO:Initializing predict_model()
2025-02-22 01:11:09,633:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da229a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:09,633:INFO:Checking exceptions
2025-02-22 01:11:09,633:INFO:Preloading libraries
2025-02-22 01:11:09,633:INFO:Set up data.
2025-02-22 01:11:09,634:INFO:Set up index.
2025-02-22 01:11:10,691:INFO:Initializing predict_model()
2025-02-22 01:11:10,691:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce765e0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:10,692:INFO:Checking exceptions
2025-02-22 01:11:10,692:INFO:Preloading libraries
2025-02-22 01:11:10,692:INFO:Set up data.
2025-02-22 01:11:10,694:INFO:Set up index.
2025-02-22 01:11:11,839:INFO:Initializing predict_model()
2025-02-22 01:11:11,840:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d370>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:11,840:INFO:Checking exceptions
2025-02-22 01:11:11,840:INFO:Preloading libraries
2025-02-22 01:11:11,841:INFO:Set up data.
2025-02-22 01:11:11,844:INFO:Set up index.
2025-02-22 01:11:12,929:INFO:Initializing predict_model()
2025-02-22 01:11:12,930:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d3a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:12,930:INFO:Checking exceptions
2025-02-22 01:11:12,930:INFO:Preloading libraries
2025-02-22 01:11:12,930:INFO:Set up data.
2025-02-22 01:11:12,931:INFO:Set up index.
2025-02-22 01:11:14,035:INFO:Initializing predict_model()
2025-02-22 01:11:14,035:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:14,035:INFO:Checking exceptions
2025-02-22 01:11:14,035:INFO:Preloading libraries
2025-02-22 01:11:14,037:INFO:Set up data.
2025-02-22 01:11:14,046:INFO:Set up index.
2025-02-22 01:11:15,119:INFO:Initializing predict_model()
2025-02-22 01:11:15,119:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16bb2d460>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:15,119:INFO:Checking exceptions
2025-02-22 01:11:15,119:INFO:Preloading libraries
2025-02-22 01:11:15,119:INFO:Set up data.
2025-02-22 01:11:15,121:INFO:Set up index.
2025-02-22 01:11:16,218:INFO:Initializing predict_model()
2025-02-22 01:11:16,219:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16ce761c0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:16,219:INFO:Checking exceptions
2025-02-22 01:11:16,219:INFO:Preloading libraries
2025-02-22 01:11:16,219:INFO:Set up data.
2025-02-22 01:11:16,221:INFO:Set up index.
2025-02-22 01:11:17,313:INFO:Initializing predict_model()
2025-02-22 01:11:17,313:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16796c580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:17,313:INFO:Checking exceptions
2025-02-22 01:11:17,313:INFO:Preloading libraries
2025-02-22 01:11:17,314:INFO:Set up data.
2025-02-22 01:11:17,315:INFO:Set up index.
2025-02-22 01:11:18,390:INFO:Initializing predict_model()
2025-02-22 01:11:18,390:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da229a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:18,390:INFO:Checking exceptions
2025-02-22 01:11:18,390:INFO:Preloading libraries
2025-02-22 01:11:18,390:INFO:Set up data.
2025-02-22 01:11:18,392:INFO:Set up index.
2025-02-22 01:11:19,451:INFO:Initializing predict_model()
2025-02-22 01:11:19,451:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x16da227f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x168374160>)
2025-02-22 01:11:19,451:INFO:Checking exceptions
2025-02-22 01:11:19,451:INFO:Preloading libraries
2025-02-22 01:11:19,451:INFO:Set up data.
2025-02-22 01:11:19,452:INFO:Set up index.
2025-02-22 01:13:34,526:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:13:34,526:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:13:34,526:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:13:34,526:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:13:35,517:INFO:PyCaret ClassificationExperiment
2025-02-22 01:13:35,517:INFO:Logging name: clf-default-name
2025-02-22 01:13:35,518:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-22 01:13:35,518:INFO:version 3.3.2
2025-02-22 01:13:35,518:INFO:Initializing setup()
2025-02-22 01:13:35,518:INFO:self.USI: 7dcb
2025-02-22 01:13:35,518:INFO:self._variable_keys: {'_ml_usecase', 'n_jobs_param', 'X_test', '_available_plots', 'logging_param', 'is_multiclass', 'gpu_n_jobs_param', 'y_train', 'gpu_param', 'exp_name_log', 'fold_groups_param', 'target_param', 'y', 'log_plots_param', 'html_param', 'exp_id', 'fold_shuffle_param', 'X', 'y_test', 'idx', 'fix_imbalance', 'data', 'X_train', 'fold_generator', 'seed', 'memory', 'USI', 'pipeline'}
2025-02-22 01:13:35,518:INFO:Checking environment
2025-02-22 01:13:35,518:INFO:python_version: 3.9.20
2025-02-22 01:13:35,518:INFO:python_build: ('main', 'Oct  3 2024 02:24:59')
2025-02-22 01:13:35,518:INFO:machine: arm64
2025-02-22 01:13:35,518:INFO:platform: macOS-15.2-arm64-arm-64bit
2025-02-22 01:13:35,518:INFO:Memory: svmem(total=8589934592, available=1244364800, percent=85.5, used=3283288064, free=68042752, active=1187332096, inactive=1082228736, wired=2095955968)
2025-02-22 01:13:35,518:INFO:Physical Core: 8
2025-02-22 01:13:35,518:INFO:Logical Core: 8
2025-02-22 01:13:35,518:INFO:Checking libraries
2025-02-22 01:13:35,518:INFO:System:
2025-02-22 01:13:35,518:INFO:    python: 3.9.20 (main, Oct  3 2024, 02:24:59)  [Clang 14.0.6 ]
2025-02-22 01:13:35,518:INFO:executable: /opt/anaconda3/envs/batey/bin/python
2025-02-22 01:13:35,518:INFO:   machine: macOS-15.2-arm64-arm-64bit
2025-02-22 01:13:35,518:INFO:PyCaret required dependencies:
2025-02-22 01:13:35,646:INFO:                 pip: 24.2
2025-02-22 01:13:35,646:INFO:          setuptools: 75.1.0
2025-02-22 01:13:35,646:INFO:             pycaret: 3.3.2
2025-02-22 01:13:35,646:INFO:             IPython: 8.18.1
2025-02-22 01:13:35,646:INFO:          ipywidgets: 8.1.5
2025-02-22 01:13:35,646:INFO:                tqdm: 4.66.6
2025-02-22 01:13:35,646:INFO:               numpy: 1.26.4
2025-02-22 01:13:35,646:INFO:              pandas: 2.1.4
2025-02-22 01:13:35,646:INFO:              jinja2: 3.1.4
2025-02-22 01:13:35,646:INFO:               scipy: 1.11.4
2025-02-22 01:13:35,646:INFO:              joblib: 1.3.2
2025-02-22 01:13:35,646:INFO:             sklearn: 1.4.2
2025-02-22 01:13:35,646:INFO:                pyod: 2.0.2
2025-02-22 01:13:35,646:INFO:            imblearn: 0.12.4
2025-02-22 01:13:35,646:INFO:   category_encoders: 2.6.4
2025-02-22 01:13:35,646:INFO:            lightgbm: 4.5.0
2025-02-22 01:13:35,646:INFO:               numba: 0.60.0
2025-02-22 01:13:35,646:INFO:            requests: 2.31.0
2025-02-22 01:13:35,646:INFO:          matplotlib: 3.7.5
2025-02-22 01:13:35,646:INFO:          scikitplot: 0.3.7
2025-02-22 01:13:35,646:INFO:         yellowbrick: 1.5
2025-02-22 01:13:35,646:INFO:              plotly: 5.24.1
2025-02-22 01:13:35,646:INFO:    plotly-resampler: Not installed
2025-02-22 01:13:35,646:INFO:             kaleido: 0.2.1
2025-02-22 01:13:35,646:INFO:           schemdraw: 0.15
2025-02-22 01:13:35,646:INFO:         statsmodels: 0.14.4
2025-02-22 01:13:35,646:INFO:              sktime: 0.26.0
2025-02-22 01:13:35,646:INFO:               tbats: 1.1.3
2025-02-22 01:13:35,646:INFO:            pmdarima: 2.0.4
2025-02-22 01:13:35,646:INFO:              psutil: 6.1.0
2025-02-22 01:13:35,646:INFO:          markupsafe: 3.0.2
2025-02-22 01:13:35,646:INFO:             pickle5: Not installed
2025-02-22 01:13:35,646:INFO:         cloudpickle: 3.1.0
2025-02-22 01:13:35,646:INFO:         deprecation: 2.1.0
2025-02-22 01:13:35,646:INFO:              xxhash: 3.5.0
2025-02-22 01:13:35,646:INFO:           wurlitzer: 3.1.1
2025-02-22 01:13:35,646:INFO:PyCaret optional dependencies:
2025-02-22 01:13:35,652:INFO:                shap: Not installed
2025-02-22 01:13:35,652:INFO:           interpret: Not installed
2025-02-22 01:13:35,652:INFO:                umap: Not installed
2025-02-22 01:13:35,652:INFO:     ydata_profiling: Not installed
2025-02-22 01:13:35,652:INFO:  explainerdashboard: Not installed
2025-02-22 01:13:35,652:INFO:             autoviz: Not installed
2025-02-22 01:13:35,652:INFO:           fairlearn: Not installed
2025-02-22 01:13:35,652:INFO:          deepchecks: Not installed
2025-02-22 01:13:35,652:INFO:             xgboost: Not installed
2025-02-22 01:13:35,652:INFO:            catboost: Not installed
2025-02-22 01:13:35,652:INFO:              kmodes: Not installed
2025-02-22 01:13:35,652:INFO:             mlxtend: Not installed
2025-02-22 01:13:35,652:INFO:       statsforecast: Not installed
2025-02-22 01:13:35,652:INFO:        tune_sklearn: Not installed
2025-02-22 01:13:35,652:INFO:                 ray: Not installed
2025-02-22 01:13:35,652:INFO:            hyperopt: Not installed
2025-02-22 01:13:35,652:INFO:              optuna: Not installed
2025-02-22 01:13:35,652:INFO:               skopt: Not installed
2025-02-22 01:13:35,652:INFO:              mlflow: Not installed
2025-02-22 01:13:35,652:INFO:              gradio: Not installed
2025-02-22 01:13:35,652:INFO:             fastapi: Not installed
2025-02-22 01:13:35,652:INFO:             uvicorn: Not installed
2025-02-22 01:13:35,652:INFO:              m2cgen: Not installed
2025-02-22 01:13:35,652:INFO:           evidently: Not installed
2025-02-22 01:13:35,652:INFO:               fugue: Not installed
2025-02-22 01:13:35,652:INFO:           streamlit: 1.41.1
2025-02-22 01:13:35,652:INFO:             prophet: Not installed
2025-02-22 01:13:35,652:INFO:None
2025-02-22 01:13:35,652:INFO:Set up data.
2025-02-22 01:13:35,661:INFO:Set up folding strategy.
2025-02-22 01:13:35,661:INFO:Set up train/test split.
2025-02-22 01:13:35,676:INFO:Set up index.
2025-02-22 01:13:35,676:INFO:Assigning column types.
2025-02-22 01:13:35,677:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-22 01:13:35,696:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-22 01:13:35,697:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-22 01:13:35,712:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,712:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,730:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-22 01:13:35,730:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-22 01:13:35,741:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,741:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,741:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-22 01:13:35,761:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-22 01:13:35,774:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,774:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,793:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-22 01:13:35,804:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,804:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,804:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-22 01:13:35,832:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,832:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,859:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,859:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,861:INFO:Preparing preprocessing pipeline...
2025-02-22 01:13:35,862:INFO:Set up label encoding.
2025-02-22 01:13:35,862:INFO:Set up simple imputation.
2025-02-22 01:13:35,875:INFO:Finished creating preprocessing pipeline.
2025-02-22 01:13:35,877:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-22 01:13:35,877:INFO:Creating final display dataframe.
2025-02-22 01:13:35,907:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping    GO: 0, STOP: 1
4           Original data shape        (11849, 6)
5        Transformed data shape        (11849, 6)
6   Transformed train set shape         (8294, 6)
7    Transformed test set shape         (3555, 6)
8              Numeric features                 5
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              7dcb
2025-02-22 01:13:35,937:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,937:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,965:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,965:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:13:35,966:INFO:setup() successfully completed in 0.45s...............
2025-02-22 01:13:35,996:INFO:Initializing compare_models()
2025-02-22 01:13:35,996:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-22 01:13:35,996:INFO:Checking exceptions
2025-02-22 01:13:35,998:INFO:Preparing display monitor
2025-02-22 01:13:36,016:INFO:Initializing Logistic Regression
2025-02-22 01:13:36,016:INFO:Total runtime is 2.948443094889323e-06 minutes
2025-02-22 01:13:36,017:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:36,017:INFO:Initializing create_model()
2025-02-22 01:13:36,017:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:36,017:INFO:Checking exceptions
2025-02-22 01:13:36,017:INFO:Importing libraries
2025-02-22 01:13:36,017:INFO:Copying training dataset
2025-02-22 01:13:36,020:INFO:Defining folds
2025-02-22 01:13:36,020:INFO:Declaring metric variables
2025-02-22 01:13:36,021:INFO:Importing untrained model
2025-02-22 01:13:36,021:INFO:Logistic Regression Imported successfully
2025-02-22 01:13:36,021:INFO:Starting cross validation
2025-02-22 01:13:36,021:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:42,397:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,398:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,402:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,405:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,406:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,407:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,409:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,409:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,410:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,411:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,412:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,412:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,415:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,417:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,420:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,423:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,426:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,427:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,427:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,429:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,431:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,434:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,437:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,440:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,610:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,613:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,616:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,617:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,620:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,623:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,652:INFO:Calculating mean and std
2025-02-22 01:13:42,666:INFO:Creating metrics dataframe
2025-02-22 01:13:42,679:INFO:Uploading results into container
2025-02-22 01:13:42,681:INFO:Uploading model into container now
2025-02-22 01:13:42,682:INFO:_master_model_container: 1
2025-02-22 01:13:42,682:INFO:_display_container: 2
2025-02-22 01:13:42,684:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-22 01:13:42,684:INFO:create_model() successfully completed......................................
2025-02-22 01:13:42,805:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:42,805:INFO:Creating metrics dataframe
2025-02-22 01:13:42,807:INFO:Initializing K Neighbors Classifier
2025-02-22 01:13:42,807:INFO:Total runtime is 0.11317674716313679 minutes
2025-02-22 01:13:42,807:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:42,807:INFO:Initializing create_model()
2025-02-22 01:13:42,807:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:42,807:INFO:Checking exceptions
2025-02-22 01:13:42,807:INFO:Importing libraries
2025-02-22 01:13:42,807:INFO:Copying training dataset
2025-02-22 01:13:42,811:INFO:Defining folds
2025-02-22 01:13:42,811:INFO:Declaring metric variables
2025-02-22 01:13:42,811:INFO:Importing untrained model
2025-02-22 01:13:42,811:INFO:K Neighbors Classifier Imported successfully
2025-02-22 01:13:42,811:INFO:Starting cross validation
2025-02-22 01:13:42,811:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:42,896:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,899:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,903:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,903:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,904:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,907:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,907:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,911:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,911:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,914:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,918:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,922:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,932:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,938:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,940:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,941:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,941:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,945:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,945:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,948:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,948:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,957:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,960:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,963:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,974:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,977:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,977:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,980:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,980:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,983:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:42,988:INFO:Calculating mean and std
2025-02-22 01:13:42,988:INFO:Creating metrics dataframe
2025-02-22 01:13:42,989:INFO:Uploading results into container
2025-02-22 01:13:42,990:INFO:Uploading model into container now
2025-02-22 01:13:42,990:INFO:_master_model_container: 2
2025-02-22 01:13:42,990:INFO:_display_container: 2
2025-02-22 01:13:42,990:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-22 01:13:42,990:INFO:create_model() successfully completed......................................
2025-02-22 01:13:43,037:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:43,037:INFO:Creating metrics dataframe
2025-02-22 01:13:43,038:INFO:Initializing Naive Bayes
2025-02-22 01:13:43,038:INFO:Total runtime is 0.11703343391418455 minutes
2025-02-22 01:13:43,038:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:43,038:INFO:Initializing create_model()
2025-02-22 01:13:43,039:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:43,039:INFO:Checking exceptions
2025-02-22 01:13:43,039:INFO:Importing libraries
2025-02-22 01:13:43,039:INFO:Copying training dataset
2025-02-22 01:13:43,041:INFO:Defining folds
2025-02-22 01:13:43,041:INFO:Declaring metric variables
2025-02-22 01:13:43,041:INFO:Importing untrained model
2025-02-22 01:13:43,041:INFO:Naive Bayes Imported successfully
2025-02-22 01:13:43,042:INFO:Starting cross validation
2025-02-22 01:13:43,042:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:43,069:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,070:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,071:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,073:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,074:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,076:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,077:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,079:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,079:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,082:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,084:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,087:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,090:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,090:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,096:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,098:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,100:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,101:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,102:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,103:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,103:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,108:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,108:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,109:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,111:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,111:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,111:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,112:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,114:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,117:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,133:INFO:Calculating mean and std
2025-02-22 01:13:43,133:INFO:Creating metrics dataframe
2025-02-22 01:13:43,134:INFO:Uploading results into container
2025-02-22 01:13:43,134:INFO:Uploading model into container now
2025-02-22 01:13:43,135:INFO:_master_model_container: 3
2025-02-22 01:13:43,135:INFO:_display_container: 2
2025-02-22 01:13:43,135:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-22 01:13:43,135:INFO:create_model() successfully completed......................................
2025-02-22 01:13:43,181:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:43,181:INFO:Creating metrics dataframe
2025-02-22 01:13:43,183:INFO:Initializing Decision Tree Classifier
2025-02-22 01:13:43,183:INFO:Total runtime is 0.11944179932276407 minutes
2025-02-22 01:13:43,183:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:43,183:INFO:Initializing create_model()
2025-02-22 01:13:43,183:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:43,183:INFO:Checking exceptions
2025-02-22 01:13:43,183:INFO:Importing libraries
2025-02-22 01:13:43,183:INFO:Copying training dataset
2025-02-22 01:13:43,185:INFO:Defining folds
2025-02-22 01:13:43,186:INFO:Declaring metric variables
2025-02-22 01:13:43,186:INFO:Importing untrained model
2025-02-22 01:13:43,186:INFO:Decision Tree Classifier Imported successfully
2025-02-22 01:13:43,186:INFO:Starting cross validation
2025-02-22 01:13:43,186:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:43,216:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,219:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,220:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,223:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,223:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,223:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,224:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,228:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,228:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,230:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,231:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,232:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,232:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,234:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,238:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,239:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,243:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,243:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,249:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,251:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,252:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,253:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,254:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,254:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,256:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,257:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,257:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,258:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,260:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,261:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,277:INFO:Calculating mean and std
2025-02-22 01:13:43,277:INFO:Creating metrics dataframe
2025-02-22 01:13:43,278:INFO:Uploading results into container
2025-02-22 01:13:43,279:INFO:Uploading model into container now
2025-02-22 01:13:43,279:INFO:_master_model_container: 4
2025-02-22 01:13:43,279:INFO:_display_container: 2
2025-02-22 01:13:43,279:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-02-22 01:13:43,279:INFO:create_model() successfully completed......................................
2025-02-22 01:13:43,319:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:43,319:INFO:Creating metrics dataframe
2025-02-22 01:13:43,320:INFO:Initializing SVM - Linear Kernel
2025-02-22 01:13:43,320:INFO:Total runtime is 0.121725062529246 minutes
2025-02-22 01:13:43,320:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:43,320:INFO:Initializing create_model()
2025-02-22 01:13:43,320:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:43,320:INFO:Checking exceptions
2025-02-22 01:13:43,320:INFO:Importing libraries
2025-02-22 01:13:43,320:INFO:Copying training dataset
2025-02-22 01:13:43,322:INFO:Defining folds
2025-02-22 01:13:43,322:INFO:Declaring metric variables
2025-02-22 01:13:43,322:INFO:Importing untrained model
2025-02-22 01:13:43,322:INFO:SVM - Linear Kernel Imported successfully
2025-02-22 01:13:43,322:INFO:Starting cross validation
2025-02-22 01:13:43,323:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:43,386:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,389:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,390:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,393:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,394:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,396:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:43,397:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,400:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,403:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,404:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:43,407:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,409:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,411:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,412:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,413:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,415:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,416:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,417:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:43,417:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:43,417:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,418:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,419:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,421:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,424:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,426:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,432:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,435:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,436:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:43,437:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,444:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,447:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,449:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:43,450:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,479:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,481:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,484:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,497:INFO:Calculating mean and std
2025-02-22 01:13:43,497:INFO:Creating metrics dataframe
2025-02-22 01:13:43,498:INFO:Uploading results into container
2025-02-22 01:13:43,498:INFO:Uploading model into container now
2025-02-22 01:13:43,499:INFO:_master_model_container: 5
2025-02-22 01:13:43,499:INFO:_display_container: 2
2025-02-22 01:13:43,499:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-22 01:13:43,499:INFO:create_model() successfully completed......................................
2025-02-22 01:13:43,544:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:43,544:INFO:Creating metrics dataframe
2025-02-22 01:13:43,545:INFO:Initializing Ridge Classifier
2025-02-22 01:13:43,545:INFO:Total runtime is 0.1254853804906209 minutes
2025-02-22 01:13:43,545:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:43,546:INFO:Initializing create_model()
2025-02-22 01:13:43,546:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:43,546:INFO:Checking exceptions
2025-02-22 01:13:43,546:INFO:Importing libraries
2025-02-22 01:13:43,546:INFO:Copying training dataset
2025-02-22 01:13:43,548:INFO:Defining folds
2025-02-22 01:13:43,548:INFO:Declaring metric variables
2025-02-22 01:13:43,548:INFO:Importing untrained model
2025-02-22 01:13:43,548:INFO:Ridge Classifier Imported successfully
2025-02-22 01:13:43,548:INFO:Starting cross validation
2025-02-22 01:13:43,548:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:43,574:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,575:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,577:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,578:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,581:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,581:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,582:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,583:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,584:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,585:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,586:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,587:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,587:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,587:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,590:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,590:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,593:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,593:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,593:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,597:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,597:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,600:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,600:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,604:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,604:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,606:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,607:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,609:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,610:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,613:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:43,628:INFO:Calculating mean and std
2025-02-22 01:13:43,628:INFO:Creating metrics dataframe
2025-02-22 01:13:43,629:INFO:Uploading results into container
2025-02-22 01:13:43,629:INFO:Uploading model into container now
2025-02-22 01:13:43,629:INFO:_master_model_container: 6
2025-02-22 01:13:43,630:INFO:_display_container: 2
2025-02-22 01:13:43,630:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-22 01:13:43,630:INFO:create_model() successfully completed......................................
2025-02-22 01:13:43,667:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:43,667:INFO:Creating metrics dataframe
2025-02-22 01:13:43,668:INFO:Initializing Random Forest Classifier
2025-02-22 01:13:43,668:INFO:Total runtime is 0.12753691673278808 minutes
2025-02-22 01:13:43,669:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:43,669:INFO:Initializing create_model()
2025-02-22 01:13:43,669:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:43,669:INFO:Checking exceptions
2025-02-22 01:13:43,669:INFO:Importing libraries
2025-02-22 01:13:43,669:INFO:Copying training dataset
2025-02-22 01:13:43,671:INFO:Defining folds
2025-02-22 01:13:43,671:INFO:Declaring metric variables
2025-02-22 01:13:43,671:INFO:Importing untrained model
2025-02-22 01:13:43,671:INFO:Random Forest Classifier Imported successfully
2025-02-22 01:13:43,671:INFO:Starting cross validation
2025-02-22 01:13:43,671:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:43,999:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,001:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,003:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,006:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,009:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,010:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,010:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,013:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,014:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,020:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,024:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,027:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,054:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,065:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,067:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,068:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,069:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,070:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,071:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,072:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,073:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,075:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,075:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,078:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,189:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,191:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,194:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,209:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,212:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,215:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,222:INFO:Calculating mean and std
2025-02-22 01:13:44,224:INFO:Creating metrics dataframe
2025-02-22 01:13:44,226:INFO:Uploading results into container
2025-02-22 01:13:44,226:INFO:Uploading model into container now
2025-02-22 01:13:44,226:INFO:_master_model_container: 7
2025-02-22 01:13:44,226:INFO:_display_container: 2
2025-02-22 01:13:44,226:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-22 01:13:44,227:INFO:create_model() successfully completed......................................
2025-02-22 01:13:44,268:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:44,268:INFO:Creating metrics dataframe
2025-02-22 01:13:44,269:INFO:Initializing Quadratic Discriminant Analysis
2025-02-22 01:13:44,269:INFO:Total runtime is 0.13754969835281372 minutes
2025-02-22 01:13:44,269:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:44,269:INFO:Initializing create_model()
2025-02-22 01:13:44,269:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:44,269:INFO:Checking exceptions
2025-02-22 01:13:44,269:INFO:Importing libraries
2025-02-22 01:13:44,269:INFO:Copying training dataset
2025-02-22 01:13:44,271:INFO:Defining folds
2025-02-22 01:13:44,271:INFO:Declaring metric variables
2025-02-22 01:13:44,271:INFO:Importing untrained model
2025-02-22 01:13:44,272:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-22 01:13:44,272:INFO:Starting cross validation
2025-02-22 01:13:44,272:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:44,310:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:13:44,310:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:13:44,310:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:13:44,310:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:13:44,310:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:13:44,310:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:13:44,316:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,317:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,317:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,318:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,319:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,320:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,320:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,320:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,322:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,323:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,323:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,324:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:13:44,325:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,326:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,327:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,327:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,330:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,331:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,334:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:13:44,335:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:13:44,336:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,337:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:13:44,339:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,341:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,342:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,342:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,342:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,344:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,345:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,345:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,347:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,348:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,348:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,351:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,356:INFO:Calculating mean and std
2025-02-22 01:13:44,356:INFO:Creating metrics dataframe
2025-02-22 01:13:44,357:INFO:Uploading results into container
2025-02-22 01:13:44,357:INFO:Uploading model into container now
2025-02-22 01:13:44,358:INFO:_master_model_container: 8
2025-02-22 01:13:44,358:INFO:_display_container: 2
2025-02-22 01:13:44,358:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-22 01:13:44,358:INFO:create_model() successfully completed......................................
2025-02-22 01:13:44,394:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:44,394:INFO:Creating metrics dataframe
2025-02-22 01:13:44,395:INFO:Initializing Ada Boost Classifier
2025-02-22 01:13:44,395:INFO:Total runtime is 0.13965369860331217 minutes
2025-02-22 01:13:44,396:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:44,396:INFO:Initializing create_model()
2025-02-22 01:13:44,396:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:44,396:INFO:Checking exceptions
2025-02-22 01:13:44,396:INFO:Importing libraries
2025-02-22 01:13:44,396:INFO:Copying training dataset
2025-02-22 01:13:44,398:INFO:Defining folds
2025-02-22 01:13:44,398:INFO:Declaring metric variables
2025-02-22 01:13:44,398:INFO:Importing untrained model
2025-02-22 01:13:44,398:INFO:Ada Boost Classifier Imported successfully
2025-02-22 01:13:44,398:INFO:Starting cross validation
2025-02-22 01:13:44,398:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:44,420:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:13:44,420:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:13:44,420:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:13:44,420:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:13:44,422:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:13:44,442:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:13:44,449:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:13:44,454:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:13:44,588:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,590:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,591:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,593:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,596:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,596:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,596:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,600:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,603:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,604:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,606:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,609:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,612:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,613:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:13:44,616:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:13:44,617:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,620:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,623:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,626:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,627:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,627:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,631:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,634:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,635:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,637:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,639:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,734:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,737:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,737:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,739:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,740:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,743:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:44,755:INFO:Calculating mean and std
2025-02-22 01:13:44,756:INFO:Creating metrics dataframe
2025-02-22 01:13:44,757:INFO:Uploading results into container
2025-02-22 01:13:44,757:INFO:Uploading model into container now
2025-02-22 01:13:44,757:INFO:_master_model_container: 9
2025-02-22 01:13:44,757:INFO:_display_container: 2
2025-02-22 01:13:44,758:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-02-22 01:13:44,758:INFO:create_model() successfully completed......................................
2025-02-22 01:13:44,800:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:44,800:INFO:Creating metrics dataframe
2025-02-22 01:13:44,802:INFO:Initializing Gradient Boosting Classifier
2025-02-22 01:13:44,802:INFO:Total runtime is 0.14642226298650104 minutes
2025-02-22 01:13:44,802:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:44,802:INFO:Initializing create_model()
2025-02-22 01:13:44,802:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:44,802:INFO:Checking exceptions
2025-02-22 01:13:44,802:INFO:Importing libraries
2025-02-22 01:13:44,802:INFO:Copying training dataset
2025-02-22 01:13:44,804:INFO:Defining folds
2025-02-22 01:13:44,804:INFO:Declaring metric variables
2025-02-22 01:13:44,804:INFO:Importing untrained model
2025-02-22 01:13:44,804:INFO:Gradient Boosting Classifier Imported successfully
2025-02-22 01:13:44,804:INFO:Starting cross validation
2025-02-22 01:13:44,804:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:45,384:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,386:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,391:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,393:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,394:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,395:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,395:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,396:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,398:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,399:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,407:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,409:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,410:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,413:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,413:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,414:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,416:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,418:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,421:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,425:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,428:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,428:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,431:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,434:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,759:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,761:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,764:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,770:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,773:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,776:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,792:INFO:Calculating mean and std
2025-02-22 01:13:45,793:INFO:Creating metrics dataframe
2025-02-22 01:13:45,795:INFO:Uploading results into container
2025-02-22 01:13:45,795:INFO:Uploading model into container now
2025-02-22 01:13:45,795:INFO:_master_model_container: 10
2025-02-22 01:13:45,795:INFO:_display_container: 2
2025-02-22 01:13:45,796:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-22 01:13:45,796:INFO:create_model() successfully completed......................................
2025-02-22 01:13:45,833:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:45,833:INFO:Creating metrics dataframe
2025-02-22 01:13:45,834:INFO:Initializing Linear Discriminant Analysis
2025-02-22 01:13:45,834:INFO:Total runtime is 0.1636338472366333 minutes
2025-02-22 01:13:45,834:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:45,834:INFO:Initializing create_model()
2025-02-22 01:13:45,834:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:45,834:INFO:Checking exceptions
2025-02-22 01:13:45,835:INFO:Importing libraries
2025-02-22 01:13:45,835:INFO:Copying training dataset
2025-02-22 01:13:45,837:INFO:Defining folds
2025-02-22 01:13:45,837:INFO:Declaring metric variables
2025-02-22 01:13:45,837:INFO:Importing untrained model
2025-02-22 01:13:45,837:INFO:Linear Discriminant Analysis Imported successfully
2025-02-22 01:13:45,837:INFO:Starting cross validation
2025-02-22 01:13:45,837:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:45,904:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,904:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,907:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,907:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,908:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,908:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,909:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,911:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,912:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,912:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,912:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,914:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,914:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,915:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,916:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,916:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,917:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,918:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,918:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,921:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,922:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,924:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,924:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,930:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,937:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,938:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,939:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,941:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,942:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,944:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:45,960:INFO:Calculating mean and std
2025-02-22 01:13:45,960:INFO:Creating metrics dataframe
2025-02-22 01:13:45,961:INFO:Uploading results into container
2025-02-22 01:13:45,961:INFO:Uploading model into container now
2025-02-22 01:13:45,962:INFO:_master_model_container: 11
2025-02-22 01:13:45,962:INFO:_display_container: 2
2025-02-22 01:13:45,962:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-22 01:13:45,962:INFO:create_model() successfully completed......................................
2025-02-22 01:13:46,004:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:46,004:INFO:Creating metrics dataframe
2025-02-22 01:13:46,005:INFO:Initializing Extra Trees Classifier
2025-02-22 01:13:46,005:INFO:Total runtime is 0.1664766510327657 minutes
2025-02-22 01:13:46,005:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:46,005:INFO:Initializing create_model()
2025-02-22 01:13:46,005:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:46,005:INFO:Checking exceptions
2025-02-22 01:13:46,005:INFO:Importing libraries
2025-02-22 01:13:46,005:INFO:Copying training dataset
2025-02-22 01:13:46,007:INFO:Defining folds
2025-02-22 01:13:46,007:INFO:Declaring metric variables
2025-02-22 01:13:46,007:INFO:Importing untrained model
2025-02-22 01:13:46,008:INFO:Extra Trees Classifier Imported successfully
2025-02-22 01:13:46,008:INFO:Starting cross validation
2025-02-22 01:13:46,008:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:46,269:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,272:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,274:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,275:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,275:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,279:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,279:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,283:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,284:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,307:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,310:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,313:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,315:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,317:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,320:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,321:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,323:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,325:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,328:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,331:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,340:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,355:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,358:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,361:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,442:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,445:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,447:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,448:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,450:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,453:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:46,463:INFO:Calculating mean and std
2025-02-22 01:13:46,464:INFO:Creating metrics dataframe
2025-02-22 01:13:46,465:INFO:Uploading results into container
2025-02-22 01:13:46,465:INFO:Uploading model into container now
2025-02-22 01:13:46,465:INFO:_master_model_container: 12
2025-02-22 01:13:46,465:INFO:_display_container: 2
2025-02-22 01:13:46,465:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-02-22 01:13:46,468:INFO:create_model() successfully completed......................................
2025-02-22 01:13:46,512:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:46,512:INFO:Creating metrics dataframe
2025-02-22 01:13:46,513:INFO:Initializing Light Gradient Boosting Machine
2025-02-22 01:13:46,513:INFO:Total runtime is 0.17494851350784302 minutes
2025-02-22 01:13:46,513:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:46,513:INFO:Initializing create_model()
2025-02-22 01:13:46,513:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:46,513:INFO:Checking exceptions
2025-02-22 01:13:46,513:INFO:Importing libraries
2025-02-22 01:13:46,513:INFO:Copying training dataset
2025-02-22 01:13:46,516:INFO:Defining folds
2025-02-22 01:13:46,516:INFO:Declaring metric variables
2025-02-22 01:13:46,517:INFO:Importing untrained model
2025-02-22 01:13:46,517:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-22 01:13:46,517:INFO:Starting cross validation
2025-02-22 01:13:46,517:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:48,226:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,234:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,237:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,315:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,318:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,321:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,475:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,478:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,481:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,491:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,494:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,496:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,509:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,513:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,516:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,520:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,524:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,530:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,541:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,544:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,547:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,757:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,760:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:48,763:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,063:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,067:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,070:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,129:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,132:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,136:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,157:INFO:Calculating mean and std
2025-02-22 01:13:49,160:INFO:Creating metrics dataframe
2025-02-22 01:13:49,161:INFO:Uploading results into container
2025-02-22 01:13:49,162:INFO:Uploading model into container now
2025-02-22 01:13:49,162:INFO:_master_model_container: 13
2025-02-22 01:13:49,162:INFO:_display_container: 2
2025-02-22 01:13:49,162:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-22 01:13:49,162:INFO:create_model() successfully completed......................................
2025-02-22 01:13:49,215:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:49,215:INFO:Creating metrics dataframe
2025-02-22 01:13:49,216:INFO:Initializing Dummy Classifier
2025-02-22 01:13:49,217:INFO:Total runtime is 0.2200053811073303 minutes
2025-02-22 01:13:49,217:INFO:SubProcess create_model() called ==================================
2025-02-22 01:13:49,217:INFO:Initializing create_model()
2025-02-22 01:13:49,217:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1054f0700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:49,217:INFO:Checking exceptions
2025-02-22 01:13:49,217:INFO:Importing libraries
2025-02-22 01:13:49,217:INFO:Copying training dataset
2025-02-22 01:13:49,219:INFO:Defining folds
2025-02-22 01:13:49,219:INFO:Declaring metric variables
2025-02-22 01:13:49,219:INFO:Importing untrained model
2025-02-22 01:13:49,219:INFO:Dummy Classifier Imported successfully
2025-02-22 01:13:49,219:INFO:Starting cross validation
2025-02-22 01:13:49,220:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:13:49,242:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,246:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,247:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,249:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:49,249:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,251:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,252:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,252:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,254:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:49,254:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:49,255:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,256:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,257:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,260:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,262:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:49,266:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,267:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,267:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,267:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,275:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,276:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,277:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:49,278:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:49,278:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,278:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,281:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,281:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,282:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:49,284:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,285:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,286:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,287:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,288:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,289:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:49,289:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,290:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:49,290:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,291:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:13:49,291:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,292:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'STOP') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:13:49,301:INFO:Calculating mean and std
2025-02-22 01:13:49,302:INFO:Creating metrics dataframe
2025-02-22 01:13:49,303:INFO:Uploading results into container
2025-02-22 01:13:49,303:INFO:Uploading model into container now
2025-02-22 01:13:49,303:INFO:_master_model_container: 14
2025-02-22 01:13:49,303:INFO:_display_container: 2
2025-02-22 01:13:49,303:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-02-22 01:13:49,303:INFO:create_model() successfully completed......................................
2025-02-22 01:13:49,345:INFO:SubProcess create_model() end ==================================
2025-02-22 01:13:49,345:INFO:Creating metrics dataframe
2025-02-22 01:13:49,361:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/pycaret_experiment/supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-22 01:13:49,362:INFO:Initializing create_model()
2025-02-22 01:13:49,362:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:49,362:INFO:Checking exceptions
2025-02-22 01:13:49,362:INFO:Importing libraries
2025-02-22 01:13:49,362:INFO:Copying training dataset
2025-02-22 01:13:49,365:INFO:Defining folds
2025-02-22 01:13:49,365:INFO:Declaring metric variables
2025-02-22 01:13:49,365:INFO:Importing untrained model
2025-02-22 01:13:49,365:INFO:Declaring custom model
2025-02-22 01:13:49,365:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-22 01:13:49,365:INFO:Cross validation set to False
2025-02-22 01:13:49,365:INFO:Fitting Model
2025-02-22 01:13:49,391:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:13:49,396:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-22 01:13:49,397:INFO:create_model() successfully completed......................................
2025-02-22 01:13:49,461:INFO:_master_model_container: 14
2025-02-22 01:13:49,462:INFO:_display_container: 2
2025-02-22 01:13:49,462:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-22 01:13:49,462:INFO:compare_models() successfully completed......................................
2025-02-22 01:13:49,491:INFO:Initializing finalize_model()
2025-02-22 01:13:49,491:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-22 01:13:49,491:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-22 01:13:49,495:INFO:Initializing create_model()
2025-02-22 01:13:49,495:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:13:49,495:INFO:Checking exceptions
2025-02-22 01:13:49,495:INFO:Importing libraries
2025-02-22 01:13:49,495:INFO:Copying training dataset
2025-02-22 01:13:49,496:INFO:Defining folds
2025-02-22 01:13:49,496:INFO:Declaring metric variables
2025-02-22 01:13:49,496:INFO:Importing untrained model
2025-02-22 01:13:49,496:INFO:Declaring custom model
2025-02-22 01:13:49,496:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-22 01:13:49,496:INFO:Cross validation set to False
2025-02-22 01:13:49,496:INFO:Fitting Model
2025-02-22 01:13:49,515:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:13:49,523:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2025-02-22 01:13:49,523:INFO:create_model() successfully completed......................................
2025-02-22 01:13:49,597:INFO:_master_model_container: 14
2025-02-22 01:13:49,597:INFO:_display_container: 2
2025-02-22 01:13:49,599:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2025-02-22 01:13:49,599:INFO:finalize_model() successfully completed......................................
2025-02-22 01:13:49,650:INFO:Initializing evaluate_model()
2025-02-22 01:13:49,650:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-02-22 01:13:49,680:INFO:Initializing plot_model()
2025-02-22 01:13:49,680:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x152179160>, system=True)
2025-02-22 01:13:49,680:INFO:Checking exceptions
2025-02-22 01:13:49,681:INFO:Preloading libraries
2025-02-22 01:13:49,681:INFO:Copying training dataset
2025-02-22 01:13:49,681:INFO:Plot type: pipeline
2025-02-22 01:13:50,070:INFO:Visual Rendered Successfully
2025-02-22 01:13:50,108:INFO:plot_model() successfully completed......................................
2025-02-22 01:13:50,115:INFO:Initializing save_model()
2025-02-22 01:13:50,115:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=nbest, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-22 01:13:50,115:INFO:Adding model into prep_pipe
2025-02-22 01:13:50,115:WARNING:Only Model saved as it was a pipeline.
2025-02-22 01:13:50,117:INFO:nbest.pkl saved in current working directory
2025-02-22 01:13:50,118:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2025-02-22 01:13:50,118:INFO:save_model() successfully completed......................................
2025-02-22 01:13:56,874:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:13:56,875:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:13:56,875:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:13:56,875:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:13:57,333:INFO:Initializing load_model()
2025-02-22 01:13:57,333:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2025-02-22 01:13:57,350:WARNING:127.0.0.1 - - [22/Feb/2025 01:13:57] "GET /api/status HTTP/1.1" 200 -
2025-02-22 01:14:00,429:INFO:Initializing predict_model()
2025-02-22 01:14:00,429:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x3035347f0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x14f63c280>)
2025-02-22 01:14:00,429:INFO:Checking exceptions
2025-02-22 01:14:00,429:INFO:Preloading libraries
2025-02-22 01:14:00,430:INFO:Set up data.
2025-02-22 01:14:00,432:INFO:Set up index.
2025-02-22 01:14:01,508:INFO:Initializing predict_model()
2025-02-22 01:14:01,509:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x303534c10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057b7700>)
2025-02-22 01:14:01,509:INFO:Checking exceptions
2025-02-22 01:14:01,509:INFO:Preloading libraries
2025-02-22 01:14:01,509:INFO:Set up data.
2025-02-22 01:14:01,512:INFO:Set up index.
2025-02-22 01:14:02,581:INFO:Initializing predict_model()
2025-02-22 01:14:02,582:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x3057b6a00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057b75e0>)
2025-02-22 01:14:02,582:INFO:Checking exceptions
2025-02-22 01:14:02,582:INFO:Preloading libraries
2025-02-22 01:14:02,583:INFO:Set up data.
2025-02-22 01:14:02,586:INFO:Set up index.
2025-02-22 01:14:03,657:INFO:Initializing predict_model()
2025-02-22 01:14:03,657:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x14f5f3f10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057b7790>)
2025-02-22 01:14:03,657:INFO:Checking exceptions
2025-02-22 01:14:03,657:INFO:Preloading libraries
2025-02-22 01:14:03,658:INFO:Set up data.
2025-02-22 01:14:03,661:INFO:Set up index.
2025-02-22 01:14:04,731:INFO:Initializing predict_model()
2025-02-22 01:14:04,731:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x303534e80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057b75e0>)
2025-02-22 01:14:04,731:INFO:Checking exceptions
2025-02-22 01:14:04,731:INFO:Preloading libraries
2025-02-22 01:14:04,732:INFO:Set up data.
2025-02-22 01:14:04,735:INFO:Set up index.
2025-02-22 01:14:05,807:INFO:Initializing predict_model()
2025-02-22 01:14:05,807:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x30354c190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057b7700>)
2025-02-22 01:14:05,807:INFO:Checking exceptions
2025-02-22 01:14:05,807:INFO:Preloading libraries
2025-02-22 01:14:05,808:INFO:Set up data.
2025-02-22 01:14:05,810:INFO:Set up index.
2025-02-22 01:14:06,885:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/decomposition/_fastica.py:128: ConvergenceWarning: FastICA did not converge. Consider increasing tolerance or the maximum number of iterations.
  warnings.warn(

2025-02-22 01:14:06,889:INFO:Initializing predict_model()
2025-02-22 01:14:06,889:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x301db7a30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057be820>)
2025-02-22 01:14:06,889:INFO:Checking exceptions
2025-02-22 01:14:06,889:INFO:Preloading libraries
2025-02-22 01:14:06,889:INFO:Set up data.
2025-02-22 01:14:06,891:INFO:Set up index.
2025-02-22 01:14:07,962:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/decomposition/_fastica.py:128: ConvergenceWarning: FastICA did not converge. Consider increasing tolerance or the maximum number of iterations.
  warnings.warn(

2025-02-22 01:14:07,979:INFO:Initializing predict_model()
2025-02-22 01:14:07,979:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x301db79a0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057be820>)
2025-02-22 01:14:07,979:INFO:Checking exceptions
2025-02-22 01:14:07,979:INFO:Preloading libraries
2025-02-22 01:14:07,979:INFO:Set up data.
2025-02-22 01:14:07,981:INFO:Set up index.
2025-02-22 01:14:09,034:INFO:Initializing predict_model()
2025-02-22 01:14:09,035:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x303541b50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x301dd8550>)
2025-02-22 01:14:09,035:INFO:Checking exceptions
2025-02-22 01:14:09,035:INFO:Preloading libraries
2025-02-22 01:14:09,035:INFO:Set up data.
2025-02-22 01:14:09,036:INFO:Set up index.
2025-02-22 01:14:10,108:INFO:Initializing predict_model()
2025-02-22 01:14:10,109:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x30354c940>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057bea60>)
2025-02-22 01:14:10,109:INFO:Checking exceptions
2025-02-22 01:14:10,109:INFO:Preloading libraries
2025-02-22 01:14:10,109:INFO:Set up data.
2025-02-22 01:14:10,110:INFO:Set up index.
2025-02-22 01:14:11,175:INFO:Initializing predict_model()
2025-02-22 01:14:11,175:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x301db7a00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x14f63c280>)
2025-02-22 01:14:11,175:INFO:Checking exceptions
2025-02-22 01:14:11,175:INFO:Preloading libraries
2025-02-22 01:14:11,175:INFO:Set up data.
2025-02-22 01:14:11,177:INFO:Set up index.
2025-02-22 01:14:12,265:INFO:Initializing predict_model()
2025-02-22 01:14:12,266:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x30579de20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057bed30>)
2025-02-22 01:14:12,266:INFO:Checking exceptions
2025-02-22 01:14:12,266:INFO:Preloading libraries
2025-02-22 01:14:12,266:INFO:Set up data.
2025-02-22 01:14:12,269:INFO:Set up index.
2025-02-22 01:14:13,336:INFO:Initializing predict_model()
2025-02-22 01:14:13,336:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x3057b6550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057bed30>)
2025-02-22 01:14:13,336:INFO:Checking exceptions
2025-02-22 01:14:13,337:INFO:Preloading libraries
2025-02-22 01:14:13,337:INFO:Set up data.
2025-02-22 01:14:13,339:INFO:Set up index.
2025-02-22 01:14:14,406:INFO:Initializing predict_model()
2025-02-22 01:14:14,407:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x30579df40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057bed30>)
2025-02-22 01:14:14,407:INFO:Checking exceptions
2025-02-22 01:14:14,407:INFO:Preloading libraries
2025-02-22 01:14:14,407:INFO:Set up data.
2025-02-22 01:14:14,409:INFO:Set up index.
2025-02-22 01:14:15,482:INFO:Initializing predict_model()
2025-02-22 01:14:15,482:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x303534b50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x14f63c280>)
2025-02-22 01:14:15,482:INFO:Checking exceptions
2025-02-22 01:14:15,482:INFO:Preloading libraries
2025-02-22 01:14:15,483:INFO:Set up data.
2025-02-22 01:14:15,484:INFO:Set up index.
2025-02-22 01:14:16,548:INFO:Initializing predict_model()
2025-02-22 01:14:16,548:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x30579d430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057bed30>)
2025-02-22 01:14:16,548:INFO:Checking exceptions
2025-02-22 01:14:16,548:INFO:Preloading libraries
2025-02-22 01:14:16,548:INFO:Set up data.
2025-02-22 01:14:16,551:INFO:Set up index.
2025-02-22 01:14:17,624:INFO:Initializing predict_model()
2025-02-22 01:14:17,625:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x305796f70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057bed30>)
2025-02-22 01:14:17,625:INFO:Checking exceptions
2025-02-22 01:14:17,625:INFO:Preloading libraries
2025-02-22 01:14:17,625:INFO:Set up data.
2025-02-22 01:14:17,627:INFO:Set up index.
2025-02-22 01:14:18,694:INFO:Initializing predict_model()
2025-02-22 01:14:18,694:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x30354c370>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057bed30>)
2025-02-22 01:14:18,694:INFO:Checking exceptions
2025-02-22 01:14:18,694:INFO:Preloading libraries
2025-02-22 01:14:18,694:INFO:Set up data.
2025-02-22 01:14:18,697:INFO:Set up index.
2025-02-22 01:14:19,764:INFO:Initializing predict_model()
2025-02-22 01:14:19,764:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x303534e20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x14f63c280>)
2025-02-22 01:14:19,764:INFO:Checking exceptions
2025-02-22 01:14:19,764:INFO:Preloading libraries
2025-02-22 01:14:19,765:INFO:Set up data.
2025-02-22 01:14:19,766:INFO:Set up index.
2025-02-22 01:14:20,831:INFO:Initializing predict_model()
2025-02-22 01:14:20,831:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x303534e80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057be820>)
2025-02-22 01:14:20,831:INFO:Checking exceptions
2025-02-22 01:14:20,832:INFO:Preloading libraries
2025-02-22 01:14:20,832:INFO:Set up data.
2025-02-22 01:14:20,834:INFO:Set up index.
2025-02-22 01:14:21,909:INFO:Initializing predict_model()
2025-02-22 01:14:21,909:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x305796f40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057be670>)
2025-02-22 01:14:21,909:INFO:Checking exceptions
2025-02-22 01:14:21,909:INFO:Preloading libraries
2025-02-22 01:14:21,910:INFO:Set up data.
2025-02-22 01:14:21,913:INFO:Set up index.
2025-02-22 01:14:23,040:INFO:Initializing predict_model()
2025-02-22 01:14:23,040:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x30354c910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x3057bee50>)
2025-02-22 01:14:23,040:INFO:Checking exceptions
2025-02-22 01:14:23,040:INFO:Preloading libraries
2025-02-22 01:14:23,041:INFO:Set up data.
2025-02-22 01:14:23,043:INFO:Set up index.
2025-02-22 01:25:41,619:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:25:41,620:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:25:41,620:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:25:41,620:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:26:29,353:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:26:29,353:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:26:29,353:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:26:29,353:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:27:05,984:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:27:05,984:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:27:05,985:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:27:05,985:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 01:27:07,336:INFO:PyCaret ClassificationExperiment
2025-02-22 01:27:07,336:INFO:Logging name: clf-default-name
2025-02-22 01:27:07,336:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-22 01:27:07,336:INFO:version 3.3.2
2025-02-22 01:27:07,336:INFO:Initializing setup()
2025-02-22 01:27:07,336:INFO:self.USI: b07d
2025-02-22 01:27:07,336:INFO:self._variable_keys: {'USI', 'target_param', 'log_plots_param', 'data', '_ml_usecase', 'n_jobs_param', 'X_train', 'gpu_param', 'html_param', 'exp_id', 'fold_generator', 'idx', 'X', 'y_train', 'y', 'fold_shuffle_param', 'pipeline', 'fix_imbalance', 'gpu_n_jobs_param', 'exp_name_log', 'X_test', '_available_plots', 'is_multiclass', 'memory', 'y_test', 'logging_param', 'seed', 'fold_groups_param'}
2025-02-22 01:27:07,336:INFO:Checking environment
2025-02-22 01:27:07,336:INFO:python_version: 3.9.20
2025-02-22 01:27:07,336:INFO:python_build: ('main', 'Oct  3 2024 02:24:59')
2025-02-22 01:27:07,336:INFO:machine: arm64
2025-02-22 01:27:07,360:INFO:platform: macOS-15.2-arm64-arm-64bit
2025-02-22 01:27:07,361:INFO:Memory: svmem(total=8589934592, available=1234468864, percent=85.6, used=3258499072, free=64569344, active=1180794880, inactive=1069957120, wired=2077704192)
2025-02-22 01:27:07,361:INFO:Physical Core: 8
2025-02-22 01:27:07,361:INFO:Logical Core: 8
2025-02-22 01:27:07,361:INFO:Checking libraries
2025-02-22 01:27:07,361:INFO:System:
2025-02-22 01:27:07,361:INFO:    python: 3.9.20 (main, Oct  3 2024, 02:24:59)  [Clang 14.0.6 ]
2025-02-22 01:27:07,361:INFO:executable: /opt/anaconda3/envs/batey/bin/python
2025-02-22 01:27:07,361:INFO:   machine: macOS-15.2-arm64-arm-64bit
2025-02-22 01:27:07,361:INFO:PyCaret required dependencies:
2025-02-22 01:27:07,451:INFO:                 pip: 24.2
2025-02-22 01:27:07,451:INFO:          setuptools: 75.1.0
2025-02-22 01:27:07,451:INFO:             pycaret: 3.3.2
2025-02-22 01:27:07,451:INFO:             IPython: 8.18.1
2025-02-22 01:27:07,451:INFO:          ipywidgets: 8.1.5
2025-02-22 01:27:07,451:INFO:                tqdm: 4.66.6
2025-02-22 01:27:07,451:INFO:               numpy: 1.26.4
2025-02-22 01:27:07,451:INFO:              pandas: 2.1.4
2025-02-22 01:27:07,451:INFO:              jinja2: 3.1.4
2025-02-22 01:27:07,451:INFO:               scipy: 1.11.4
2025-02-22 01:27:07,451:INFO:              joblib: 1.3.2
2025-02-22 01:27:07,451:INFO:             sklearn: 1.4.2
2025-02-22 01:27:07,451:INFO:                pyod: 2.0.2
2025-02-22 01:27:07,451:INFO:            imblearn: 0.12.4
2025-02-22 01:27:07,451:INFO:   category_encoders: 2.6.4
2025-02-22 01:27:07,451:INFO:            lightgbm: 4.5.0
2025-02-22 01:27:07,451:INFO:               numba: 0.60.0
2025-02-22 01:27:07,451:INFO:            requests: 2.31.0
2025-02-22 01:27:07,451:INFO:          matplotlib: 3.7.5
2025-02-22 01:27:07,451:INFO:          scikitplot: 0.3.7
2025-02-22 01:27:07,451:INFO:         yellowbrick: 1.5
2025-02-22 01:27:07,451:INFO:              plotly: 5.24.1
2025-02-22 01:27:07,451:INFO:    plotly-resampler: Not installed
2025-02-22 01:27:07,451:INFO:             kaleido: 0.2.1
2025-02-22 01:27:07,451:INFO:           schemdraw: 0.15
2025-02-22 01:27:07,451:INFO:         statsmodels: 0.14.4
2025-02-22 01:27:07,451:INFO:              sktime: 0.26.0
2025-02-22 01:27:07,451:INFO:               tbats: 1.1.3
2025-02-22 01:27:07,451:INFO:            pmdarima: 2.0.4
2025-02-22 01:27:07,451:INFO:              psutil: 6.1.0
2025-02-22 01:27:07,451:INFO:          markupsafe: 3.0.2
2025-02-22 01:27:07,451:INFO:             pickle5: Not installed
2025-02-22 01:27:07,451:INFO:         cloudpickle: 3.1.0
2025-02-22 01:27:07,451:INFO:         deprecation: 2.1.0
2025-02-22 01:27:07,451:INFO:              xxhash: 3.5.0
2025-02-22 01:27:07,451:INFO:           wurlitzer: 3.1.1
2025-02-22 01:27:07,451:INFO:PyCaret optional dependencies:
2025-02-22 01:27:07,456:INFO:                shap: Not installed
2025-02-22 01:27:07,456:INFO:           interpret: Not installed
2025-02-22 01:27:07,456:INFO:                umap: Not installed
2025-02-22 01:27:07,456:INFO:     ydata_profiling: Not installed
2025-02-22 01:27:07,456:INFO:  explainerdashboard: Not installed
2025-02-22 01:27:07,456:INFO:             autoviz: Not installed
2025-02-22 01:27:07,456:INFO:           fairlearn: Not installed
2025-02-22 01:27:07,456:INFO:          deepchecks: Not installed
2025-02-22 01:27:07,456:INFO:             xgboost: Not installed
2025-02-22 01:27:07,456:INFO:            catboost: Not installed
2025-02-22 01:27:07,456:INFO:              kmodes: Not installed
2025-02-22 01:27:07,456:INFO:             mlxtend: Not installed
2025-02-22 01:27:07,456:INFO:       statsforecast: Not installed
2025-02-22 01:27:07,457:INFO:        tune_sklearn: Not installed
2025-02-22 01:27:07,457:INFO:                 ray: Not installed
2025-02-22 01:27:07,457:INFO:            hyperopt: Not installed
2025-02-22 01:27:07,457:INFO:              optuna: Not installed
2025-02-22 01:27:07,457:INFO:               skopt: Not installed
2025-02-22 01:27:07,457:INFO:              mlflow: Not installed
2025-02-22 01:27:07,457:INFO:              gradio: Not installed
2025-02-22 01:27:07,457:INFO:             fastapi: Not installed
2025-02-22 01:27:07,457:INFO:             uvicorn: Not installed
2025-02-22 01:27:07,457:INFO:              m2cgen: Not installed
2025-02-22 01:27:07,457:INFO:           evidently: Not installed
2025-02-22 01:27:07,457:INFO:               fugue: Not installed
2025-02-22 01:27:07,457:INFO:           streamlit: 1.41.1
2025-02-22 01:27:07,457:INFO:             prophet: Not installed
2025-02-22 01:27:07,457:INFO:None
2025-02-22 01:27:07,457:INFO:Set up data.
2025-02-22 01:27:07,462:INFO:Set up folding strategy.
2025-02-22 01:27:07,462:INFO:Set up train/test split.
2025-02-22 01:27:07,469:INFO:Set up index.
2025-02-22 01:27:07,469:INFO:Assigning column types.
2025-02-22 01:27:07,470:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-22 01:27:07,488:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-22 01:27:07,491:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-22 01:27:07,507:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,507:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,524:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-22 01:27:07,524:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-22 01:27:07,535:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,535:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,535:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-22 01:27:07,553:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-22 01:27:07,564:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,564:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,582:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-22 01:27:07,592:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,592:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,593:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-22 01:27:07,620:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,620:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,647:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,647:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,648:INFO:Preparing preprocessing pipeline...
2025-02-22 01:27:07,650:INFO:Set up label encoding.
2025-02-22 01:27:07,650:INFO:Set up simple imputation.
2025-02-22 01:27:07,650:INFO:Set up feature normalization.
2025-02-22 01:27:07,669:INFO:Finished creating preprocessing pipeline.
2025-02-22 01:27:07,672:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicato...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2025-02-22 01:27:07,672:INFO:Creating final display dataframe.
2025-02-22 01:27:07,711:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type        Multiclass
3                Target mapping  1: 0, 2: 1, 3: 2
4           Original data shape        (15476, 6)
5        Transformed data shape        (15476, 6)
6   Transformed train set shape        (10833, 6)
7    Transformed test set shape         (4643, 6)
8              Numeric features                 5
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13                    Normalize              True
14             Normalize method            zscore
15               Fold Generator   StratifiedKFold
16                  Fold Number                 3
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  clf-default-name
21                          USI              b07d
2025-02-22 01:27:07,740:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,740:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,770:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,770:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-22 01:27:07,772:INFO:setup() successfully completed in 0.44s...............
2025-02-22 01:27:07,772:INFO:Initializing compare_models()
2025-02-22 01:27:07,772:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-22 01:27:07,772:INFO:Checking exceptions
2025-02-22 01:27:07,776:INFO:Preparing display monitor
2025-02-22 01:27:07,795:INFO:Initializing Logistic Regression
2025-02-22 01:27:07,795:INFO:Total runtime is 7.434686024983724e-06 minutes
2025-02-22 01:27:07,795:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:07,796:INFO:Initializing create_model()
2025-02-22 01:27:07,796:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=lr, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:07,796:INFO:Checking exceptions
2025-02-22 01:27:07,796:INFO:Importing libraries
2025-02-22 01:27:07,796:INFO:Copying training dataset
2025-02-22 01:27:07,799:INFO:Defining folds
2025-02-22 01:27:07,799:INFO:Declaring metric variables
2025-02-22 01:27:07,800:INFO:Importing untrained model
2025-02-22 01:27:07,800:INFO:Logistic Regression Imported successfully
2025-02-22 01:27:07,800:INFO:Starting cross validation
2025-02-22 01:27:07,801:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:11,096:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:11,096:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:11,096:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:11,098:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:11,098:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:11,098:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:11,100:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:11,100:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:11,100:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:11,100:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:27:11,101:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:11,101:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:11,101:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:11,116:INFO:Calculating mean and std
2025-02-22 01:27:11,118:INFO:Creating metrics dataframe
2025-02-22 01:27:11,122:INFO:Uploading results into container
2025-02-22 01:27:11,123:INFO:Uploading model into container now
2025-02-22 01:27:11,125:INFO:_master_model_container: 1
2025-02-22 01:27:11,125:INFO:_display_container: 2
2025-02-22 01:27:11,128:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-22 01:27:11,128:INFO:create_model() successfully completed......................................
2025-02-22 01:27:11,217:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:11,217:INFO:Creating metrics dataframe
2025-02-22 01:27:11,218:INFO:Initializing K Neighbors Classifier
2025-02-22 01:27:11,218:INFO:Total runtime is 0.05705900192260742 minutes
2025-02-22 01:27:11,219:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:11,219:INFO:Initializing create_model()
2025-02-22 01:27:11,219:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=knn, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:11,219:INFO:Checking exceptions
2025-02-22 01:27:11,219:INFO:Importing libraries
2025-02-22 01:27:11,219:INFO:Copying training dataset
2025-02-22 01:27:11,222:INFO:Defining folds
2025-02-22 01:27:11,222:INFO:Declaring metric variables
2025-02-22 01:27:11,222:INFO:Importing untrained model
2025-02-22 01:27:11,222:INFO:K Neighbors Classifier Imported successfully
2025-02-22 01:27:11,222:INFO:Starting cross validation
2025-02-22 01:27:11,223:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:11,328:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:11,329:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:11,331:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:12,185:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:12,185:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:12,186:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:12,187:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:12,188:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:12,188:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:12,201:INFO:Calculating mean and std
2025-02-22 01:27:12,202:INFO:Creating metrics dataframe
2025-02-22 01:27:12,207:INFO:Uploading results into container
2025-02-22 01:27:12,207:INFO:Uploading model into container now
2025-02-22 01:27:12,208:INFO:_master_model_container: 2
2025-02-22 01:27:12,208:INFO:_display_container: 2
2025-02-22 01:27:12,208:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-22 01:27:12,208:INFO:create_model() successfully completed......................................
2025-02-22 01:27:12,254:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:12,255:INFO:Creating metrics dataframe
2025-02-22 01:27:12,256:INFO:Initializing Naive Bayes
2025-02-22 01:27:12,256:INFO:Total runtime is 0.07434516350428264 minutes
2025-02-22 01:27:12,256:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:12,256:INFO:Initializing create_model()
2025-02-22 01:27:12,256:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=nb, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:12,256:INFO:Checking exceptions
2025-02-22 01:27:12,256:INFO:Importing libraries
2025-02-22 01:27:12,256:INFO:Copying training dataset
2025-02-22 01:27:12,258:INFO:Defining folds
2025-02-22 01:27:12,258:INFO:Declaring metric variables
2025-02-22 01:27:12,258:INFO:Importing untrained model
2025-02-22 01:27:12,258:INFO:Naive Bayes Imported successfully
2025-02-22 01:27:12,259:INFO:Starting cross validation
2025-02-22 01:27:12,259:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:12,277:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:12,278:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:12,278:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:12,278:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:27:12,279:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:12,279:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:12,280:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:13,180:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:13,181:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:13,183:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:13,190:INFO:Calculating mean and std
2025-02-22 01:27:13,191:INFO:Creating metrics dataframe
2025-02-22 01:27:13,193:INFO:Uploading results into container
2025-02-22 01:27:13,193:INFO:Uploading model into container now
2025-02-22 01:27:13,194:INFO:_master_model_container: 3
2025-02-22 01:27:13,194:INFO:_display_container: 2
2025-02-22 01:27:13,197:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-22 01:27:13,197:INFO:create_model() successfully completed......................................
2025-02-22 01:27:13,280:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:13,280:INFO:Creating metrics dataframe
2025-02-22 01:27:13,281:INFO:Initializing Decision Tree Classifier
2025-02-22 01:27:13,281:INFO:Total runtime is 0.09143269856770833 minutes
2025-02-22 01:27:13,281:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:13,281:INFO:Initializing create_model()
2025-02-22 01:27:13,281:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=dt, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:13,281:INFO:Checking exceptions
2025-02-22 01:27:13,281:INFO:Importing libraries
2025-02-22 01:27:13,281:INFO:Copying training dataset
2025-02-22 01:27:13,283:INFO:Defining folds
2025-02-22 01:27:13,283:INFO:Declaring metric variables
2025-02-22 01:27:13,283:INFO:Importing untrained model
2025-02-22 01:27:13,284:INFO:Decision Tree Classifier Imported successfully
2025-02-22 01:27:13,284:INFO:Starting cross validation
2025-02-22 01:27:13,284:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:13,318:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:13,320:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:13,321:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,147:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,147:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,149:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,149:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,150:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,150:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,168:INFO:Calculating mean and std
2025-02-22 01:27:14,169:INFO:Creating metrics dataframe
2025-02-22 01:27:14,171:INFO:Uploading results into container
2025-02-22 01:27:14,171:INFO:Uploading model into container now
2025-02-22 01:27:14,171:INFO:_master_model_container: 4
2025-02-22 01:27:14,171:INFO:_display_container: 2
2025-02-22 01:27:14,171:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-02-22 01:27:14,172:INFO:create_model() successfully completed......................................
2025-02-22 01:27:14,225:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:14,225:INFO:Creating metrics dataframe
2025-02-22 01:27:14,226:INFO:Initializing SVM - Linear Kernel
2025-02-22 01:27:14,226:INFO:Total runtime is 0.10718413194020589 minutes
2025-02-22 01:27:14,226:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:14,226:INFO:Initializing create_model()
2025-02-22 01:27:14,226:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=svm, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:14,226:INFO:Checking exceptions
2025-02-22 01:27:14,226:INFO:Importing libraries
2025-02-22 01:27:14,226:INFO:Copying training dataset
2025-02-22 01:27:14,230:INFO:Defining folds
2025-02-22 01:27:14,230:INFO:Declaring metric variables
2025-02-22 01:27:14,230:INFO:Importing untrained model
2025-02-22 01:27:14,230:INFO:SVM - Linear Kernel Imported successfully
2025-02-22 01:27:14,230:INFO:Starting cross validation
2025-02-22 01:27:14,231:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:14,294:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:14,294:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:14,295:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,295:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,296:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:14,296:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,296:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,297:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,298:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,298:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,298:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,299:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,314:INFO:Calculating mean and std
2025-02-22 01:27:14,314:INFO:Creating metrics dataframe
2025-02-22 01:27:14,315:INFO:Uploading results into container
2025-02-22 01:27:14,315:INFO:Uploading model into container now
2025-02-22 01:27:14,315:INFO:_master_model_container: 5
2025-02-22 01:27:14,315:INFO:_display_container: 2
2025-02-22 01:27:14,315:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-22 01:27:14,315:INFO:create_model() successfully completed......................................
2025-02-22 01:27:14,353:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:14,353:INFO:Creating metrics dataframe
2025-02-22 01:27:14,354:INFO:Initializing Ridge Classifier
2025-02-22 01:27:14,354:INFO:Total runtime is 0.10932569901148478 minutes
2025-02-22 01:27:14,355:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:14,355:INFO:Initializing create_model()
2025-02-22 01:27:14,355:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=ridge, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:14,355:INFO:Checking exceptions
2025-02-22 01:27:14,355:INFO:Importing libraries
2025-02-22 01:27:14,355:INFO:Copying training dataset
2025-02-22 01:27:14,357:INFO:Defining folds
2025-02-22 01:27:14,357:INFO:Declaring metric variables
2025-02-22 01:27:14,357:INFO:Importing untrained model
2025-02-22 01:27:14,357:INFO:Ridge Classifier Imported successfully
2025-02-22 01:27:14,358:INFO:Starting cross validation
2025-02-22 01:27:14,358:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:14,391:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:14,392:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,393:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:14,393:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,394:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,394:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,395:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,396:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,403:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:14,404:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,405:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,406:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:27:14,406:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,421:INFO:Calculating mean and std
2025-02-22 01:27:14,421:INFO:Creating metrics dataframe
2025-02-22 01:27:14,424:INFO:Uploading results into container
2025-02-22 01:27:14,424:INFO:Uploading model into container now
2025-02-22 01:27:14,424:INFO:_master_model_container: 6
2025-02-22 01:27:14,424:INFO:_display_container: 2
2025-02-22 01:27:14,424:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-22 01:27:14,424:INFO:create_model() successfully completed......................................
2025-02-22 01:27:14,466:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:14,466:INFO:Creating metrics dataframe
2025-02-22 01:27:14,468:INFO:Initializing Random Forest Classifier
2025-02-22 01:27:14,468:INFO:Total runtime is 0.11121315161387126 minutes
2025-02-22 01:27:14,468:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:14,468:INFO:Initializing create_model()
2025-02-22 01:27:14,468:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=rf, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:14,468:INFO:Checking exceptions
2025-02-22 01:27:14,468:INFO:Importing libraries
2025-02-22 01:27:14,468:INFO:Copying training dataset
2025-02-22 01:27:14,470:INFO:Defining folds
2025-02-22 01:27:14,471:INFO:Declaring metric variables
2025-02-22 01:27:14,471:INFO:Importing untrained model
2025-02-22 01:27:14,471:INFO:Random Forest Classifier Imported successfully
2025-02-22 01:27:14,471:INFO:Starting cross validation
2025-02-22 01:27:14,471:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:14,677:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,678:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,679:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,683:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,685:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,686:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,693:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,694:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,695:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,709:INFO:Calculating mean and std
2025-02-22 01:27:14,709:INFO:Creating metrics dataframe
2025-02-22 01:27:14,710:INFO:Uploading results into container
2025-02-22 01:27:14,710:INFO:Uploading model into container now
2025-02-22 01:27:14,710:INFO:_master_model_container: 7
2025-02-22 01:27:14,710:INFO:_display_container: 2
2025-02-22 01:27:14,711:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-22 01:27:14,711:INFO:create_model() successfully completed......................................
2025-02-22 01:27:14,767:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:14,768:INFO:Creating metrics dataframe
2025-02-22 01:27:14,769:INFO:Initializing Quadratic Discriminant Analysis
2025-02-22 01:27:14,769:INFO:Total runtime is 0.11623291969299317 minutes
2025-02-22 01:27:14,769:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:14,769:INFO:Initializing create_model()
2025-02-22 01:27:14,769:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=qda, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:14,769:INFO:Checking exceptions
2025-02-22 01:27:14,769:INFO:Importing libraries
2025-02-22 01:27:14,769:INFO:Copying training dataset
2025-02-22 01:27:14,772:INFO:Defining folds
2025-02-22 01:27:14,772:INFO:Declaring metric variables
2025-02-22 01:27:14,772:INFO:Importing untrained model
2025-02-22 01:27:14,772:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-22 01:27:14,773:INFO:Starting cross validation
2025-02-22 01:27:14,773:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:14,791:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:27:14,791:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:27:14,792:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:27:14,796:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:14,796:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:14,797:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:14,797:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,797:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,797:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,798:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,798:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,799:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,799:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,799:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,800:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:14,810:INFO:Calculating mean and std
2025-02-22 01:27:14,810:INFO:Creating metrics dataframe
2025-02-22 01:27:14,811:INFO:Uploading results into container
2025-02-22 01:27:14,811:INFO:Uploading model into container now
2025-02-22 01:27:14,811:INFO:_master_model_container: 8
2025-02-22 01:27:14,811:INFO:_display_container: 2
2025-02-22 01:27:14,811:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-22 01:27:14,811:INFO:create_model() successfully completed......................................
2025-02-22 01:27:14,848:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:14,848:INFO:Creating metrics dataframe
2025-02-22 01:27:14,849:INFO:Initializing Ada Boost Classifier
2025-02-22 01:27:14,849:INFO:Total runtime is 0.11757511695226033 minutes
2025-02-22 01:27:14,849:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:14,850:INFO:Initializing create_model()
2025-02-22 01:27:14,850:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=ada, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:14,850:INFO:Checking exceptions
2025-02-22 01:27:14,850:INFO:Importing libraries
2025-02-22 01:27:14,850:INFO:Copying training dataset
2025-02-22 01:27:14,852:INFO:Defining folds
2025-02-22 01:27:14,852:INFO:Declaring metric variables
2025-02-22 01:27:14,852:INFO:Importing untrained model
2025-02-22 01:27:14,852:INFO:Ada Boost Classifier Imported successfully
2025-02-22 01:27:14,852:INFO:Starting cross validation
2025-02-22 01:27:14,853:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:14,870:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:27:14,870:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:27:14,873:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-22 01:27:15,024:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:15,025:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:15,026:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:15,027:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:15,027:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:15,028:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:15,029:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:15,030:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:15,030:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:15,031:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:15,032:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:15,034:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:15,047:INFO:Calculating mean and std
2025-02-22 01:27:15,048:INFO:Creating metrics dataframe
2025-02-22 01:27:15,049:INFO:Uploading results into container
2025-02-22 01:27:15,049:INFO:Uploading model into container now
2025-02-22 01:27:15,049:INFO:_master_model_container: 9
2025-02-22 01:27:15,049:INFO:_display_container: 2
2025-02-22 01:27:15,049:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-02-22 01:27:15,049:INFO:create_model() successfully completed......................................
2025-02-22 01:27:15,086:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:15,087:INFO:Creating metrics dataframe
2025-02-22 01:27:15,088:INFO:Initializing Gradient Boosting Classifier
2025-02-22 01:27:15,088:INFO:Total runtime is 0.12154664993286132 minutes
2025-02-22 01:27:15,088:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:15,088:INFO:Initializing create_model()
2025-02-22 01:27:15,088:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=gbc, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:15,088:INFO:Checking exceptions
2025-02-22 01:27:15,088:INFO:Importing libraries
2025-02-22 01:27:15,088:INFO:Copying training dataset
2025-02-22 01:27:15,090:INFO:Defining folds
2025-02-22 01:27:15,090:INFO:Declaring metric variables
2025-02-22 01:27:15,090:INFO:Importing untrained model
2025-02-22 01:27:15,091:INFO:Gradient Boosting Classifier Imported successfully
2025-02-22 01:27:15,091:INFO:Starting cross validation
2025-02-22 01:27:15,091:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:16,244:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:16,245:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,246:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,248:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,250:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:16,250:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,252:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,254:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,257:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:16,258:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,260:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,261:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,270:INFO:Calculating mean and std
2025-02-22 01:27:16,271:INFO:Creating metrics dataframe
2025-02-22 01:27:16,273:INFO:Uploading results into container
2025-02-22 01:27:16,273:INFO:Uploading model into container now
2025-02-22 01:27:16,274:INFO:_master_model_container: 10
2025-02-22 01:27:16,274:INFO:_display_container: 2
2025-02-22 01:27:16,274:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-22 01:27:16,274:INFO:create_model() successfully completed......................................
2025-02-22 01:27:16,334:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:16,335:INFO:Creating metrics dataframe
2025-02-22 01:27:16,336:INFO:Initializing Linear Discriminant Analysis
2025-02-22 01:27:16,336:INFO:Total runtime is 0.14234559933344523 minutes
2025-02-22 01:27:16,336:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:16,336:INFO:Initializing create_model()
2025-02-22 01:27:16,336:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=lda, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:16,336:INFO:Checking exceptions
2025-02-22 01:27:16,336:INFO:Importing libraries
2025-02-22 01:27:16,336:INFO:Copying training dataset
2025-02-22 01:27:16,338:INFO:Defining folds
2025-02-22 01:27:16,338:INFO:Declaring metric variables
2025-02-22 01:27:16,338:INFO:Importing untrained model
2025-02-22 01:27:16,338:INFO:Linear Discriminant Analysis Imported successfully
2025-02-22 01:27:16,339:INFO:Starting cross validation
2025-02-22 01:27:16,339:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:16,393:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:16,394:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:16,395:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,396:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,395:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 196, in _score
    return super()._score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-22 01:27:16,398:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,399:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,400:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:27:16,401:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,402:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,402:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,404:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,404:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,413:INFO:Calculating mean and std
2025-02-22 01:27:16,413:INFO:Creating metrics dataframe
2025-02-22 01:27:16,414:INFO:Uploading results into container
2025-02-22 01:27:16,414:INFO:Uploading model into container now
2025-02-22 01:27:16,415:INFO:_master_model_container: 11
2025-02-22 01:27:16,415:INFO:_display_container: 2
2025-02-22 01:27:16,415:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-22 01:27:16,415:INFO:create_model() successfully completed......................................
2025-02-22 01:27:16,459:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:16,459:INFO:Creating metrics dataframe
2025-02-22 01:27:16,461:INFO:Initializing Extra Trees Classifier
2025-02-22 01:27:16,461:INFO:Total runtime is 0.14442840019861858 minutes
2025-02-22 01:27:16,461:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:16,461:INFO:Initializing create_model()
2025-02-22 01:27:16,461:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=et, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:16,461:INFO:Checking exceptions
2025-02-22 01:27:16,461:INFO:Importing libraries
2025-02-22 01:27:16,461:INFO:Copying training dataset
2025-02-22 01:27:16,464:INFO:Defining folds
2025-02-22 01:27:16,464:INFO:Declaring metric variables
2025-02-22 01:27:16,464:INFO:Importing untrained model
2025-02-22 01:27:16,464:INFO:Extra Trees Classifier Imported successfully
2025-02-22 01:27:16,464:INFO:Starting cross validation
2025-02-22 01:27:16,465:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:16,648:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,651:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,652:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,654:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,656:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,657:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,669:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,671:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,672:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:16,684:INFO:Calculating mean and std
2025-02-22 01:27:16,684:INFO:Creating metrics dataframe
2025-02-22 01:27:16,685:INFO:Uploading results into container
2025-02-22 01:27:16,685:INFO:Uploading model into container now
2025-02-22 01:27:16,685:INFO:_master_model_container: 12
2025-02-22 01:27:16,685:INFO:_display_container: 2
2025-02-22 01:27:16,685:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-02-22 01:27:16,685:INFO:create_model() successfully completed......................................
2025-02-22 01:27:16,731:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:16,731:INFO:Creating metrics dataframe
2025-02-22 01:27:16,732:INFO:Initializing Light Gradient Boosting Machine
2025-02-22 01:27:16,732:INFO:Total runtime is 0.14895931879679364 minutes
2025-02-22 01:27:16,733:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:16,733:INFO:Initializing create_model()
2025-02-22 01:27:16,733:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=lightgbm, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:16,733:INFO:Checking exceptions
2025-02-22 01:27:16,733:INFO:Importing libraries
2025-02-22 01:27:16,733:INFO:Copying training dataset
2025-02-22 01:27:16,735:INFO:Defining folds
2025-02-22 01:27:16,736:INFO:Declaring metric variables
2025-02-22 01:27:16,736:INFO:Importing untrained model
2025-02-22 01:27:16,736:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-22 01:27:16,736:INFO:Starting cross validation
2025-02-22 01:27:16,736:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:18,849:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:18,851:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:18,852:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,236:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,238:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,240:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,384:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,386:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,387:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,394:INFO:Calculating mean and std
2025-02-22 01:27:19,395:INFO:Creating metrics dataframe
2025-02-22 01:27:19,402:INFO:Uploading results into container
2025-02-22 01:27:19,402:INFO:Uploading model into container now
2025-02-22 01:27:19,403:INFO:_master_model_container: 13
2025-02-22 01:27:19,403:INFO:_display_container: 2
2025-02-22 01:27:19,404:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-22 01:27:19,404:INFO:create_model() successfully completed......................................
2025-02-22 01:27:19,487:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:19,487:INFO:Creating metrics dataframe
2025-02-22 01:27:19,489:INFO:Initializing Dummy Classifier
2025-02-22 01:27:19,489:INFO:Total runtime is 0.19490036567052207 minutes
2025-02-22 01:27:19,489:INFO:SubProcess create_model() called ==================================
2025-02-22 01:27:19,489:INFO:Initializing create_model()
2025-02-22 01:27:19,489:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=dummy, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x1653bcac0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:19,489:INFO:Checking exceptions
2025-02-22 01:27:19,489:INFO:Importing libraries
2025-02-22 01:27:19,489:INFO:Copying training dataset
2025-02-22 01:27:19,492:INFO:Defining folds
2025-02-22 01:27:19,492:INFO:Declaring metric variables
2025-02-22 01:27:19,493:INFO:Importing untrained model
2025-02-22 01:27:19,493:INFO:Dummy Classifier Imported successfully
2025-02-22 01:27:19,493:INFO:Starting cross validation
2025-02-22 01:27:19,493:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-02-22 01:27:19,520:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,522:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,522:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:27:19,523:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,529:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,532:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,533:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:27:19,533:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,537:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,538:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,538:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-22 01:27:19,539:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-22 01:27:19,554:INFO:Calculating mean and std
2025-02-22 01:27:19,555:INFO:Creating metrics dataframe
2025-02-22 01:27:19,555:INFO:Uploading results into container
2025-02-22 01:27:19,556:INFO:Uploading model into container now
2025-02-22 01:27:19,556:INFO:_master_model_container: 14
2025-02-22 01:27:19,556:INFO:_display_container: 2
2025-02-22 01:27:19,556:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-02-22 01:27:19,556:INFO:create_model() successfully completed......................................
2025-02-22 01:27:19,594:INFO:SubProcess create_model() end ==================================
2025-02-22 01:27:19,594:INFO:Creating metrics dataframe
2025-02-22 01:27:19,597:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/pycaret_experiment/supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-22 01:27:19,597:INFO:Initializing create_model()
2025-02-22 01:27:19,597:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:19,597:INFO:Checking exceptions
2025-02-22 01:27:19,598:INFO:Importing libraries
2025-02-22 01:27:19,598:INFO:Copying training dataset
2025-02-22 01:27:19,600:INFO:Defining folds
2025-02-22 01:27:19,600:INFO:Declaring metric variables
2025-02-22 01:27:19,600:INFO:Importing untrained model
2025-02-22 01:27:19,600:INFO:Declaring custom model
2025-02-22 01:27:19,600:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-22 01:27:19,600:INFO:Cross validation set to False
2025-02-22 01:27:19,600:INFO:Fitting Model
2025-02-22 01:27:19,607:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:27:19,608:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-22 01:27:19,608:INFO:create_model() successfully completed......................................
2025-02-22 01:27:19,678:INFO:_master_model_container: 14
2025-02-22 01:27:19,679:INFO:_display_container: 2
2025-02-22 01:27:19,679:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-22 01:27:19,679:INFO:compare_models() successfully completed......................................
2025-02-22 01:27:19,679:INFO:Initializing finalize_model()
2025-02-22 01:27:19,679:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-22 01:27:19,679:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-22 01:27:19,681:INFO:Initializing create_model()
2025-02-22 01:27:19,681:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-22 01:27:19,681:INFO:Checking exceptions
2025-02-22 01:27:19,681:INFO:Importing libraries
2025-02-22 01:27:19,681:INFO:Copying training dataset
2025-02-22 01:27:19,682:INFO:Defining folds
2025-02-22 01:27:19,682:INFO:Declaring metric variables
2025-02-22 01:27:19,682:INFO:Importing untrained model
2025-02-22 01:27:19,682:INFO:Declaring custom model
2025-02-22 01:27:19,682:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-22 01:27:19,682:INFO:Cross validation set to False
2025-02-22 01:27:19,682:INFO:Fitting Model
2025-02-22 01:27:19,708:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-22 01:27:19,715:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2025-02-22 01:27:19,715:INFO:create_model() successfully completed......................................
2025-02-22 01:27:19,772:INFO:_master_model_container: 14
2025-02-22 01:27:19,772:INFO:_display_container: 2
2025-02-22 01:27:19,774:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2025-02-22 01:27:19,774:INFO:finalize_model() successfully completed......................................
2025-02-22 01:27:19,854:INFO:Initializing save_model()
2025-02-22 01:27:19,854:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=nbest, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicato...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-22 01:27:19,854:INFO:Adding model into prep_pipe
2025-02-22 01:27:19,854:WARNING:Only Model saved as it was a pipeline.
2025-02-22 01:27:19,855:INFO:nbest.pkl saved in current working directory
2025-02-22 01:27:19,860:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2025-02-22 01:27:19,860:INFO:save_model() successfully completed......................................
2025-02-22 01:27:22,797:INFO:Initializing load_model()
2025-02-22 01:27:22,797:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2025-02-22 01:27:25,849:INFO:Initializing predict_model()
2025-02-22 01:27:25,849:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x1643519d0>)
2025-02-22 01:27:25,849:INFO:Checking exceptions
2025-02-22 01:27:25,850:INFO:Preloading libraries
2025-02-22 01:27:25,850:INFO:Set up data.
2025-02-22 01:27:25,853:INFO:Set up index.
2025-02-22 01:27:26,936:INFO:Initializing predict_model()
2025-02-22 01:27:26,936:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x1654605e0>)
2025-02-22 01:27:26,936:INFO:Checking exceptions
2025-02-22 01:27:26,936:INFO:Preloading libraries
2025-02-22 01:27:26,937:INFO:Set up data.
2025-02-22 01:27:26,938:INFO:Set up index.
2025-02-22 01:27:28,000:INFO:Initializing predict_model()
2025-02-22 01:27:28,001:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x165460790>)
2025-02-22 01:27:28,001:INFO:Checking exceptions
2025-02-22 01:27:28,001:INFO:Preloading libraries
2025-02-22 01:27:28,001:INFO:Set up data.
2025-02-22 01:27:28,002:INFO:Set up index.
2025-02-22 01:27:29,079:INFO:Initializing predict_model()
2025-02-22 01:27:29,079:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x1654608b0>)
2025-02-22 01:27:29,079:INFO:Checking exceptions
2025-02-22 01:27:29,079:INFO:Preloading libraries
2025-02-22 01:27:29,080:INFO:Set up data.
2025-02-22 01:27:29,082:INFO:Set up index.
2025-02-22 01:27:30,162:INFO:Initializing predict_model()
2025-02-22 01:27:30,162:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x165460790>)
2025-02-22 01:27:30,163:INFO:Checking exceptions
2025-02-22 01:27:30,163:INFO:Preloading libraries
2025-02-22 01:27:30,163:INFO:Set up data.
2025-02-22 01:27:30,165:INFO:Set up index.
2025-02-22 01:27:31,256:INFO:Initializing predict_model()
2025-02-22 01:27:31,257:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x1654608b0>)
2025-02-22 01:27:31,257:INFO:Checking exceptions
2025-02-22 01:27:31,257:INFO:Preloading libraries
2025-02-22 01:27:31,257:INFO:Set up data.
2025-02-22 01:27:31,259:INFO:Set up index.
2025-02-22 01:27:32,419:INFO:Initializing predict_model()
2025-02-22 01:27:32,419:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x1654608b0>)
2025-02-22 01:27:32,419:INFO:Checking exceptions
2025-02-22 01:27:32,419:INFO:Preloading libraries
2025-02-22 01:27:32,420:INFO:Set up data.
2025-02-22 01:27:32,422:INFO:Set up index.
2025-02-22 01:27:33,540:INFO:Initializing predict_model()
2025-02-22 01:27:33,540:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x165460700>)
2025-02-22 01:27:33,540:INFO:Checking exceptions
2025-02-22 01:27:33,540:INFO:Preloading libraries
2025-02-22 01:27:33,541:INFO:Set up data.
2025-02-22 01:27:33,542:INFO:Set up index.
2025-02-22 01:27:34,626:INFO:Initializing predict_model()
2025-02-22 01:27:34,626:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x1654608b0>)
2025-02-22 01:27:34,627:INFO:Checking exceptions
2025-02-22 01:27:34,627:INFO:Preloading libraries
2025-02-22 01:27:34,627:INFO:Set up data.
2025-02-22 01:27:34,630:INFO:Set up index.
2025-02-22 01:27:35,725:INFO:Initializing predict_model()
2025-02-22 01:27:35,726:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x164375880>, estimator=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Timestamp', 'Raw_EMG1',
                                             'Raw_EMG2', 'IC1', 'IC2'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', QuadraticDiscriminantAnalysis())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x164a09e50>)
2025-02-22 01:27:35,726:INFO:Checking exceptions
2025-02-22 01:27:35,726:INFO:Preloading libraries
2025-02-22 01:27:35,726:INFO:Set up data.
2025-02-22 01:27:35,729:INFO:Set up index.
2025-02-22 11:31:15,705:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 11:31:15,706:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 11:31:15,706:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 11:31:15,706:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 11:31:33,493:INFO:Initializing load_model()
2025-02-22 11:31:33,499:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2025-02-22 11:58:28,485:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 11:58:28,485:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 11:58:28,485:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 11:58:28,485:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-22 11:58:36,152:INFO:Initializing load_model()
2025-02-22 11:58:36,153:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
